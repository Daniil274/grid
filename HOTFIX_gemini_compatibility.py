#!/usr/bin/env python3
"""
HOTFIX: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–º–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å Gemini API

–ü—Ä–æ–±–ª–µ–º–∞: Gemini API —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–≥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–º–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
- –î–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã –∏–ª–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
- –¢–æ–ª—å–∫–æ a-z, A-Z, 0-9, _, ., -
- –ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞

–≠—Ç–æ—Ç hotfix –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—é –∏–º–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è Gemini.
"""

import re
from typing import List, Any
from core.agent_factory import AgentFactory
from core.config import Config


def sanitize_tool_name_for_gemini(name: str) -> str:
    """
    –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ—Ç –∏–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Gemini API.
    
    Args:
        name: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    
    Returns:
        –°–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —Å Gemini API
    """
    if not name:
        return "unknown_tool"
    
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    sanitized = re.sub(r'[^a-zA-Z0-9_.-]', '_', name)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã –∏–ª–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    if sanitized and not (sanitized[0].isalpha() or sanitized[0] == '_'):
        sanitized = f"tool_{sanitized}"
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤
    if len(sanitized) > 64:
        sanitized = sanitized[:60] + "_trunc"
    
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∞—Å—å –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º default
    if not sanitized:
        sanitized = "tool_function"
    
    return sanitized


def add_missing_config_method():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ get_all_models –≤ –∫–ª–∞—Å—Å Config."""
    
    def get_all_models(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏."""
        return self.config.get('models', {})
    
    def get_all_agents(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤."""
        return self.config.get('agents', {})
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å Config
    Config.get_all_models = get_all_models
    Config.get_all_agents = get_all_agents
    
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å Config")


def patch_agent_factory_for_gemini():
    """–ü–∞—Ç—á–∏—Ç AgentFactory –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Gemini API."""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    original_create_context_aware_agent_tool = AgentFactory._create_context_aware_agent_tool
    
    def patched_create_context_aware_agent_tool(
        self,
        sub_agent,
        tool_name: str,
        tool_description: str,
        context_strategy: str = "minimal",
        context_depth: int = 5,
        include_tool_history: bool = False
    ):
        """–ü–∞—Ç—á–µ–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–µ–π –∏–º–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
        
        # –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –∏–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è Gemini
        sanitized_name = sanitize_tool_name_for_gemini(tool_name)
        
        if sanitized_name != tool_name:
            print(f"üîß –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: '{tool_name}' ‚Üí '{sanitized_name}'")
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
        return original_create_context_aware_agent_tool(
            self,
            sub_agent,
            sanitized_name,
            tool_description,
            context_strategy,
            context_depth,
            include_tool_history
        )
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å–µ
    AgentFactory._create_context_aware_agent_tool = patched_create_context_aware_agent_tool
    
    print("‚úÖ AgentFactory –ø—Ä–æ–ø–∞—Ç—á–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Gemini API")


def apply_hotfix():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    print("üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ HOTFIX –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Gemini API...")
    
    try:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –≤ Config
        add_missing_config_method()
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: –ü–∞—Ç—á–∏–º AgentFactory –¥–ª—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω
        patch_agent_factory_for_gemini()
        
        print("‚úÖ HOTFIX —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!")
        print("üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–Ω–µ—Å—Ç–∏ —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è HOTFIX: {e}")
        return False


if __name__ == "__main__":
    success = apply_hotfix()
    
    if success:
        print("\nüß™ –ó–∞–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ QA —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        import subprocess
        import sys
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            result = subprocess.run([
                sys.executable, "tests/qa_test_runner.py"
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ QA —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã –≤ QA —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
                print("STDOUT:", result.stdout[-500:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                print("STDERR:", result.stderr[-500:])
                
        except subprocess.TimeoutExpired:
            print("‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ —Ç–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    else:
        print("üí• HOTFIX –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        sys.exit(1)