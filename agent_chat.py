#!/usr/bin/env python3
"""
Legacy chat interface for Grid Agent System.
Simplified version of the main.py CLI for backward compatibility.
"""

import asyncio
import argparse
import sys
from pathlib import Path

# Add grid package to path
sys.path.insert(0, str(Path(__file__).parent))

from core.config import Config
from core.agent_factory import AgentFactory
from utils.logger import Logger
from utils.pretty_logger import PrettyLogger, update_todos
from utils.exceptions import GridError
import logging
import time

# Configure logging to suppress technical messages
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("openai").setLevel(logging.WARNING)
logging.getLogger("grid").setLevel(logging.WARNING)
Logger.configure(level="WARNING", enable_console=False)

# Initialize beautiful logger
pretty_logger = PrettyLogger("agent_chat")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description="Legacy Grid agent chat interface")
    parser.add_argument(
        "--agent", "-a",
        type=str,
        default=None,
        help="Agent name (default from config)"
    )
    parser.add_argument(
        "--path", "-p",
        type=str,
        default=None,
        help="Working directory"
    )
    parser.add_argument(
        "--context-path",
        type=str,
        default=None,
        help="Context path for agent"
    )
    parser.add_argument(
        "--message", "-m",
        type=str,
        default=None,
        help="Single message to send (interactive mode if not provided)"
    )
    parser.add_argument(
        "--config", "-c",
        type=str,
        default="config.yaml",
        help="Configuration file path"
    )
    
    args = parser.parse_args()
    
    try:
        # Beautiful initialization
        pretty_logger.info("–ó–∞–ø—É—Å–∫ Grid Agent System...")
        
        # Load configuration
        operation = pretty_logger.tool_start("Config", path=args.config)
        config = Config(args.config, args.path)
        pretty_logger.tool_result(operation, result="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # Create factory
        operation = pretty_logger.tool_start("AgentFactory")
        factory = AgentFactory(config, args.path)
        pretty_logger.tool_result(operation, result="–§–∞–±—Ä–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # Determine agent
        agent_key = args.agent or config.get_default_agent()
        
        pretty_logger.success("Grid Agent System –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        print("\n" + "="*60)
        print("ü§ñ Grid Agent System - –ö—Ä–∞—Å–∏–≤—ã–π –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("="*60)
        print(f"–ê–≥–µ–Ω—Ç: {agent_key}")
        print(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {config.get_working_directory()}")
        if args.context_path:
            print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—É—Ç—å: {args.context_path}")
        print("="*60)
        
        if args.message:
            # Single message mode
            pretty_logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {args.message}")
            
            # Show todos for processing
            update_todos([
                {"id": "1", "content": f"–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º {agent_key}", "status": "in_progress", "priority": "high"},
                {"id": "2", "content": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç", "status": "pending", "priority": "high"},
                {"id": "3", "content": "–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã", "status": "pending", "priority": "medium"}
            ])
            
            try:
                # Track agent execution
                operation = pretty_logger.tool_start("AgentExecution", 
                                                   agent=agent_key, 
                                                   message_length=len(args.message))
                
                start_time = time.time()
                response = await factory.run_agent(agent_key, args.message, args.context_path)
                duration = time.time() - start_time
                
                # Update todos - completed
                update_todos([
                    {"id": "1", "content": f"–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º {agent_key}", "status": "completed", "priority": "high"},
                    {"id": "2", "content": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç", "status": "completed", "priority": "high"},
                    {"id": "3", "content": "–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã", "status": "completed", "priority": "medium"}
                ])
                
                pretty_logger.tool_result(operation, 
                                        result=f"–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({duration:.2f}—Å, {len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                print(f"\nü§ñ –û—Ç–≤–µ—Ç:")
                print("-" * 60)
                print(response)
                
                pretty_logger.success("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                
            except Exception as e:
                # Update todos - error
                update_todos([
                    {"id": "1", "content": f"–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º {agent_key}", "status": "completed", "priority": "high"},
                    {"id": "2", "content": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç", "status": "pending", "priority": "high"},
                    {"id": "3", "content": f"–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É: {str(e)}", "status": "in_progress", "priority": "high"}
                ])
                pretty_logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            # Interactive mode
            print("\nCommands:")
            print("  'exit' or 'quit' - Exit")
            print("  'clear' - Clear conversation history")
            print("  'context' - Show context info")
            print("  'help' - Show this help")
            print("-" * 60)
            
            while True:
                try:
                    user_input = input("\nüë§ You: ").strip()
                    
                    if user_input.lower() in ['exit', 'quit']:
                        print("üëã Goodbye!")
                        break
                    elif user_input.lower() == 'clear':
                        operation = pretty_logger.tool_start("ClearContext")
                        factory.clear_context()
                        pretty_logger.tool_result(operation, result="–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω")
                        pretty_logger.success("–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã –æ—á–∏—â–µ–Ω")
                        continue
                    elif user_input.lower() == 'context':
                        operation = pretty_logger.tool_start("GetContext")
                        context_info = factory.get_context_info()
                        pretty_logger.tool_result(operation, result="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞")
                        
                        print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:")
                        print(f"   –°–æ–æ–±—â–µ–Ω–∏–π: {context_info.get('conversation_messages', 0)}")
                        print(f"   –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {context_info.get('execution_history', 0)}")
                        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {context_info.get('memory_usage_mb', 0):.2f} –ú–ë")
                        if context_info.get('last_user_message'):
                            last_msg = context_info['last_user_message'][:100]
                            print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_msg}...")
                        continue
                    elif user_input.lower() == 'help':
                        print("\nAvailable commands:")
                        print("  exit, quit - Exit the chat")
                        print("  clear - Clear conversation history")
                        print("  context - Show context information")
                        print("  help - Show this help message")
                        continue
                    elif not user_input:
                        continue
                    
                    # Process user message with beautiful logging
                    pretty_logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º {agent_key}...")
                    
                    # Show processing todos
                    update_todos([
                        {"id": "1", "content": f"–ü–µ—Ä–µ–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É {agent_key}", "status": "in_progress", "priority": "high"},
                        {"id": "2", "content": "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å", "status": "pending", "priority": "high"},
                        {"id": "3", "content": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç", "status": "pending", "priority": "medium"}
                    ])
                    
                    try:
                        # Track execution
                        operation = pretty_logger.tool_start("AgentExecution", 
                                                           agent=agent_key,
                                                           message_length=len(user_input))
                        
                        start_time = time.time()
                        response = await factory.run_agent(agent_key, user_input, args.context_path)
                        duration = time.time() - start_time
                        
                        # Update todos - success
                        update_todos([
                            {"id": "1", "content": f"–ü–µ—Ä–µ–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É {agent_key}", "status": "completed", "priority": "high"},
                            {"id": "2", "content": "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å", "status": "completed", "priority": "high"},
                            {"id": "3", "content": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç", "status": "completed", "priority": "medium"}
                        ])
                        
                        pretty_logger.tool_result(operation, 
                                                result=f"–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω ({duration:.2f}—Å, {len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
                        
                        print(f"\nü§ñ {agent_key}: {response}")
                        
                    except Exception as e:
                        # Update todos - error
                        update_todos([
                            {"id": "1", "content": f"–ü–µ—Ä–µ–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É {agent_key}", "status": "completed", "priority": "high"},
                            {"id": "2", "content": "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å", "status": "pending", "priority": "high"},
                            {"id": "3", "content": f"–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É: {str(e)}", "status": "in_progress", "priority": "high"}
                        ])
                        pretty_logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
                        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                    
                except KeyboardInterrupt:
                    print("\n\nüëã Interrupted. Goodbye!")
                    break
                except EOFError:
                    print("\n\nüëã EOF. Goodbye!")
                    break
        
        # Beautiful cleanup
        operation = pretty_logger.tool_start("Cleanup")
        await factory.cleanup()
        pretty_logger.tool_result(operation, result="–†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
        pretty_logger.success("Grid Agent System –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
        
    except GridError as e:
        pretty_logger.error(f"–û—à–∏–±–∫–∞ Grid: {e}")
        print(f"‚ùå Grid Error: {e}")
        sys.exit(1)
    except Exception as e:
        pretty_logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå Unexpected Error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())