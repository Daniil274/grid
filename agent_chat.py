#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—É—Ç–µ–π.
"""

import asyncio
import argparse
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent / "src"))

from agent_factory import AgentFactory
from config_loader import config
from agents import Runner

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—É—Ç–µ–π")
    parser.add_argument(
        "--agent", "-a",
        type=str,
        default=None,
        help="–ò–º—è –∞–≥–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)"
    )
    parser.add_argument(
        "--path", "-p",
        type=str,
        default=None,
        help="–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è"
    )
    parser.add_argument(
        "--context-path",
        type=str,
        default=None,
        help="–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∞–≥–µ–Ω—Ç–∞"
    )
    parser.add_argument(
        "--message", "-m",
        type=str,
        default=None,
        help="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≥–µ–Ω—Ç—É (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)"
    )
    
    args = parser.parse_args()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –∞–≥–µ–Ω—Ç–æ–≤
        factory = AgentFactory(working_directory=args.path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞
        agent_key = args.agent or config.get_default_agent()
        print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≥–µ–Ω—Ç: {agent_key}")
        
        # –õ–æ–≥–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
        try:
            from utils.logger import log_custom
            agent_config = config.get_agent(agent_key)
            log_custom('info', 'agent_creation', f"Creating agent '{agent_key}' ({agent_config.name})")
            log_custom('debug', 'agent_creation', f"Model: {agent_config.model}")
            log_custom('debug', 'agent_creation', f"Tools: {agent_config.tools}")
            log_custom('debug', 'agent_creation', f"Base prompt: {agent_config.base_prompt}")
            log_custom('debug', 'agent_creation', f"Has custom prompt: {bool(agent_config.custom_prompt)}")
            
            # –õ–æ–≥–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–∞—Ö-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
            agent_tools = [tool for tool in agent_config.tools if config._config.get('tools', {}).get(tool, {}).get('type') == 'agent']
            if agent_tools:
                log_custom('info', 'agent_creation', f"Agent tools available: {agent_tools}")
                for tool in agent_tools:
                    tool_config = config._config.get('tools', {}).get(tool, {})
                    agent_name = tool_config.get('name', f"call_{tool}")
                    log_custom('debug', 'agent_creation', f"  - {tool} -> {agent_name}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = await factory.create_agent(agent_key, context_path=args.context_path)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Ç—è—Ö
        print("\nüìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É—Ç—è—Ö:")
        print(f"   –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {config.get_working_directory()}")
        print(f"   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config.get_config_directory()}")
        if args.context_path:
            print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—É—Ç—å: {args.context_path}")
            print(f"   –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—É—Ç—å: {config.get_absolute_path(args.context_path)}")
        print()
        
        if args.message:
            # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            print(f"üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {args.message}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            factory.add_to_context("user", args.message)
            
            # –õ–æ–≥–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞
            import time
            start_time = time.time()
            try:
                from utils.logger import log_agent_start
                log_agent_start(agent.name, args.message)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            
            result = await Runner.run(agent, args.message)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            factory.add_to_context("assistant", result.final_output)
            
            # –õ–æ–≥–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            duration = time.time() - start_time
            try:
                from utils.logger import log_agent_end
                log_agent_end(agent.name, result.final_output, duration)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            
            print(f"\nü§ñ –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞:\n{result.final_output}")
        else:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            print("=== –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º ===")
            print("–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
            print("–í–≤–µ–¥–∏—Ç–µ 'clear' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")
            print("–í–≤–µ–¥–∏—Ç–µ 'paths' –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É—Ç—è—Ö")
            print("–í–≤–µ–¥–∏—Ç–µ 'context' –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
            print("==========================")
            
            while True:
                try:
                    user_input = input("\n–í—ã: ").strip()
                    
                    if user_input.lower() == 'exit':
                        break
                    elif user_input.lower() == 'clear':
                        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        factory.clear_context()
                        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
                        continue
                    elif user_input.lower() == 'paths':
                        print("\nüìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É—Ç—è—Ö:")
                        print(f"   –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {config.get_working_directory()}")
                        print(f"   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config.get_config_directory()}")
                        if args.context_path:
                            print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—É—Ç—å: {args.context_path}")
                            print(f"   –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—É—Ç—å: {config.get_absolute_path(args.context_path)}")
                        continue
                    elif user_input.lower() == 'context':
                        context_info = factory.get_context_info()
                        print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:")
                        print(f"   –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {context_info['history_count']}")
                        if context_info['last_user_message']:
                            print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context_info['last_user_message'][:100]}...")
                        else:
                            print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –Ω–µ—Ç")
                        continue
                    elif not user_input:
                        continue
                    
                    print("\n–ê–≥–µ–Ω—Ç –¥—É–º–∞–µ—Ç...")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    factory.add_to_context("user", user_input)
                    
                    # –õ–æ–≥–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞
                    import time
                    start_time = time.time()
                    try:
                        from utils.logger import log_agent_start
                        log_agent_start(agent.name, user_input)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    
                    result = await Runner.run(agent, user_input)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    factory.add_to_context("assistant", result.final_output)
                    
                    # –õ–æ–≥–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
                    duration = time.time() - start_time
                    try:
                        from utils.logger import log_agent_end
                        log_agent_end(agent.name, result.final_output, duration)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    
                    print(f"\n–ê–≥–µ–Ω—Ç: {result.final_output}")
                    
                except KeyboardInterrupt:
                    print("\n–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                    break
                except Exception as e:
                    print(f"\n–û—à–∏–±–∫–∞: {e}")
                    continue
        
        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        await factory.cleanup()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())