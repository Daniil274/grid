"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –¥–ª—è Grid —Å–∏—Å—Ç–µ–º—ã.
–ó–∞–º–µ–Ω—è–µ—Ç –ª–æ–≥–≥–µ—Ä—ã –Ω–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É Agents SDK –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI.
"""

import os
from typing import List, Optional, Any
from agents.tracing import set_trace_processors
from agents.tracing.processors import BatchTraceProcessor
from agents.tracing.processor_interface import TracingExporter
from agents.tracing.traces import Trace
from agents.tracing.spans import Span
import json
import logging


class ConsoleSpanExporter(TracingExporter):
    """–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    
    def __init__(self, level: str = "INFO"):
        self.level = level.upper()
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (INFO): –º–∏–Ω–∏–º—É–º —Å—Ç—Ä–æ–∫ –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        self._compact = self.level in ("INFO", "COMPACT", "MINIMAL", "LOW")
        # –î–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤ MCP list tools –ø–æ –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ —Å–µ—Ä–≤–µ—Ä—É
        self._printed_mcp_servers: set[str] = set()
    
    def export(self, items: list[Trace | Span[Any]]) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        for item in items:
            try:
                data = item.export()
                if not data:
                    continue
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                if data.get("object") == "trace":
                    self._print_trace(data)
                elif data.get("object") == "trace.span":
                    self._print_span(data)
                else:
                    # –ù–µ –ø–µ—á–∞—Ç–∞–µ–º —Å—ã—Ä—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å
                    return
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏: {e}")
    
    def _print_trace(self, data: dict):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–∞."""
        trace_id = data.get("id", "unknown")
        workflow = data.get("workflow_name", "Unknown")
        print(f"\nüöÄ TRACE START: {workflow}")
        print(f"   ID: {trace_id}")
        if not self._compact and data.get("metadata"):
            print(f"   Metadata: {self._format_kv_table(data['metadata'])}")
    
    def _print_span(self, data: dict):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å–ø–∞–Ω–∞."""
        span_data = data.get("span_data", {})
        span_type = span_data.get("type", "unknown")
        
        # –ò–∫–æ–Ω–∫–∏
        icons = {
            "agent": "ü§ñ",
            "generation": "üí≠", 
            "function": "üîß",
            "mcp_tools": "üß©",
        }
        icon = icons.get(span_type, "‚Ä¢")
        
        name = span_data.get("name") or span_data.get("server") or ""
        duration = self._calculate_duration(data)
        dur = f" ‚è± {duration}" if duration else ""
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ —Ç–∏–ø–∞–º (–∫–æ–º–ø–∞–∫—Ç–Ω–æ)
        if span_type == "agent":
            # –°–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –∞–≥–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
            if self._compact:
                return
            print(f"{icon} {name or 'agent'}{dur}")
            return
        
        if span_type == "generation":
            # –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
            if self._compact:
                return
            usage = span_data.get("usage") or {}
            model = span_data.get("model")
            it = usage.get("input_tokens")
            ot = usage.get("output_tokens")
            parts = []
            if model:
                parts.append(f"model={model}")
            if it is not None and ot is not None:
                parts.append(f"tokens={it}‚Üí{ot}")
            line = f"{icon} gen"
            if parts:
                line += " " + ", ".join(parts)
            line += dur
            print(line)
            self._print_generation_io(span_data)
            return
        
        if span_type == "function":
            # –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–æ, –±–µ–∑ JSON
            mcp_data = span_data.get("mcp_data") or {}
            mcp_hint = ""
            server = mcp_data.get("server")
            tool = mcp_data.get("tool") or name
            if server:
                mcp_hint = f" ¬∑ MCP {server}.{tool}"
            print(f"{icon} {name or 'function'}{mcp_hint}{dur}")
            if not self._compact:
                self._print_function_io(span_data)
            return
        
        if span_type == "mcp_tools":
            # –í –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ –ø–µ—á–∞—Ç–∞–µ–º –≤–æ–≤—Å–µ
            if self._compact:
                return
            # –ü–µ—á–∞—Ç–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –±–µ–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π
            server = span_data.get("server") or "unknown"
            if server in self._printed_mcp_servers:
                return
            tools = span_data.get("result") or []
            print(f"{icon} MCP {server}: {len(tools)} tool(s)")
            self._printed_mcp_servers.add(server)
            return
        
        if span_type == "handoff":
            # –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ö–µ–Ω–¥-–æ—Ñ—Ñ: –ê–≥–µ–Ω—ÇA ‚Üí –ê–≥–µ–Ω—ÇB
            src = span_data.get("from_agent") or "agent"
            dst = span_data.get("to_agent") or "agent"
            print(f"üîÄ {src} ‚Üí {dst}{dur}")
            return
        
        # –ü—Ä–æ—á–∏–µ —Ç–∏–ø—ã ‚Äî –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
        if name:
            print(f"{icon} {span_type} {name}{dur}")
        else:
            print(f"{icon} {span_type}{dur}")
    
    def _print_generation_io(self, span_data: dict) -> None:
        input_seq = span_data.get("input")
        output_seq = span_data.get("output")
        if input_seq:
            print("   in:")
            for msg in self._humanize_messages(input_seq)[:3]:
                print(f"     {msg}")
            if len(input_seq) > 3:
                print(f"     ‚Ä¶ +{len(input_seq) - 3}")
        if output_seq:
            print("   out:")
            for msg in self._humanize_messages(output_seq)[:2]:
                print(f"     {msg}")
            if len(output_seq) > 2:
                print(f"     ‚Ä¶ +{len(output_seq) - 2}")
    
    def _print_function_info(self, span_data: dict):
        # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self._print_function_io(span_data)
    
    def _print_function_io(self, span_data: dict) -> None:
        input_data = span_data.get("input")
        output_data = span_data.get("output")
        if input_data:
            print(f"   in: {self._humanize_value(input_data, max_len=160)}")
        if output_data is not None:
            print(f"   out: {self._humanize_value(output_data, max_len=200)}")
    
    def _calculate_duration(self, data: dict) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ø–∞–Ω–∞."""
        try:
            from datetime import datetime
            started = data.get("started_at")
            ended = data.get("ended_at")
            
            if started and ended:
                start_time = datetime.fromisoformat(started.replace('Z', '+00:00'))
                end_time = datetime.fromisoformat(ended.replace('Z', '+00:00'))
                duration = end_time - start_time
                
                total_seconds = duration.total_seconds()
                if total_seconds < 1:
                    return f"{total_seconds * 1000:.0f}ms"
                else:
                    return f"{total_seconds:.2f}s"
        except Exception:
            pass
        return ""
    
    # ===== Helpers =====
    def _trim(self, value: Any, max_len: int) -> str:
        s = str(value)
        return s if len(s) <= max_len else s[: max_len - 1] + "‚Ä¶"
    
    def _humanize_value(self, value: Any, max_len: int = 200) -> str:
        """–ö–æ—Ä–æ—Ç–∫–∏–π —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ –±–µ–∑ JSON-—Å–∫–æ–±–æ–∫ –∏ –∫–∞–≤—ã—á–µ–∫ –≤–æ–∫—Ä—É–≥ –∫–ª—é—á–µ–π."""
        try:
            if isinstance(value, (dict, list)):
                if isinstance(value, dict):
                    items = []
                    for k, v in list(value.items())[:10]:
                        items.append(f"{k}={self._one_line(v, 100)}")
                    s = ", ".join(items)
                else:  # list
                    s = ", ".join(self._one_line(v, 80) for v in value[:10])
            else:
                s = str(value)
        except Exception:
            s = str(value)
        if len(s) > max_len:
            s = s[: max_len - 1] + "‚Ä¶"
        return s
    
    def _one_line(self, v: Any, max_len: int) -> str:
        s = str(v)
        s = s.replace("\n", " ‚èé ")
        if len(s) > max_len:
            s = s[: max_len - 1] + "‚Ä¶"
        if s.startswith("'") and s.endswith("'") and len(s) <= max_len:
            s = s[1:-1]
        return s
    
    def _humanize_messages(self, seq: Any) -> list[str]:
        result: list[str] = []
        try:
            for msg in seq:
                role = msg.get("role") if isinstance(msg, dict) else None
                content = msg.get("content") if isinstance(msg, dict) else None
                if isinstance(content, list):
                    parts = []
                    for part in content:
                        if isinstance(part, dict) and part.get("type") == "text":
                            parts.append(part.get("text", ""))
                    content_str = " ".join(parts) if parts else str(content)
                else:
                    content_str = str(content)
                role_str = f"{role}: " if role else ""
                result.append(role_str + self._one_line(content_str, 160))
        except Exception:
            result = [self._one_line(seq, 160)]
        return result
    
    def _format_kv_table(self, d: dict) -> str:
        try:
            items = [f"{k}={self._one_line(v, 60)}" for k, v in list(d.items())[:10]]
            return ", ".join(items)
        except Exception:
            return str(d)


class FileSpanExporter(TracingExporter):
    """–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä —Å–ø–∞–Ω–æ–≤ –≤ JSONL —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
    
    def __init__(self, path: str = "traces/traces.json"):
        self.path = path
        self.logger = logging.getLogger("grid.tracing")
        
    def export(self, items: List[Trace | Span]) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∞–Ω—ã –≤ —Ñ–∞–π–ª."""
        try:
            with open(self.path, "a", encoding="utf-8") as f:
                for item in items:
                    data = item.export()
                    if data:
                        f.write(json.dumps(data, ensure_ascii=False) + "\n")
            self.logger.debug(f"Exported {len(items)} traces to {self.path}")
        except Exception as e:
            self.logger.error(f"Failed to export traces to {self.path}: {e}")


class HttpSpanExporter(TracingExporter):
    """–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä —Å–ø–∞–Ω–æ–≤ –ø–æ HTTP –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ self-hosted —Å–µ—Ä–≤–∏—Å."""
    
    def __init__(self, endpoint: str, timeout: float = 10.0):
        self.endpoint = endpoint
        self.timeout = timeout
        self.logger = logging.getLogger("grid.tracing")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º httpx —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        try:
            import httpx
            self.client = httpx.Client(timeout=timeout)
            self._httpx_available = True
        except ImportError:
            self.logger.warning("httpx not available, HTTP export disabled")
            self._httpx_available = False
        
    def export(self, items: List[Trace | Span]) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∞–Ω—ã –ø–æ HTTP."""
        if not self._httpx_available:
            return
            
        try:
            data = [i.export() for i in items if i.export()]
            if data:
                response = self.client.post(
                    self.endpoint, 
                    json={"data": data},
                    headers={"Content-Type": "application/json"}
                )
                response.raise_for_status()
                self.logger.debug(f"Exported {len(data)} traces to {self.endpoint}")
        except Exception as e:
            self.logger.error(f"Failed to export traces to {self.endpoint}: {e}")


class TracingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –¥–ª—è Grid —Å–∏—Å—Ç–µ–º—ã."""
    
    def __init__(self):
        self._configured = False
        self._processors = []
        
    def configure_console_tracing(self, level: str = "INFO") -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å."""
        if self._configured:
            return
            
        exporter = ConsoleSpanExporter(level)
        processor = BatchTraceProcessor(exporter)
        self._processors = [processor]
        self._configured = True
        
    def configure_file_tracing(self, path: str = "traces.jsonl") -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –≤ —Ñ–∞–π–ª."""
        if self._configured:
            return
            
        exporter = FileSpanExporter(path)
        processor = BatchTraceProcessor(exporter)
        self._processors = [processor]
        self._configured = True
        
    def configure_http_tracing(self, endpoint: str, timeout: float = 10.0) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –ø–æ HTTP."""
        if self._configured:
            return
            
        exporter = HttpSpanExporter(endpoint, timeout)
        processor = BatchTraceProcessor(exporter)
        self._processors = [processor]
        self._configured = True
        
    def configure_custom_tracing(self, exporters: List[TracingExporter]) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞–º–∏."""
        if self._configured:
            return
            
        processors = [BatchTraceProcessor(exporter) for exporter in exporters]
        self._processors = processors
        self._configured = True
        
    def apply(self) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏."""
        if not self._configured:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
            self.configure_console_tracing()
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        set_trace_processors(self._processors)
        
    def disable(self) -> None:
        """–û—Ç–∫–ª—é—á–∞–µ—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É."""
        from agents.tracing import set_trace_processors
        set_trace_processors([])
        self._configured = False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
tracing_config = TracingConfig()


def configure_tracing_from_env() -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    tracing_type = os.getenv("GRID_TRACING_TYPE", "console")
    tracing_level = os.getenv("GRID_TRACING_LEVEL", "INFO")
    
    if tracing_type == "file":
        path = os.getenv("GRID_TRACING_FILE", "traces.jsonl")
        tracing_config.configure_file_tracing(path)
    elif tracing_type == "http":
        endpoint = os.getenv("GRID_TRACING_ENDPOINT", "http://localhost:8080/ingest")
        timeout = float(os.getenv("GRID_TRACING_TIMEOUT", "10.0"))
        tracing_config.configure_http_tracing(endpoint, timeout)
    elif tracing_type == "console":
        tracing_config.configure_console_tracing(tracing_level)
    elif tracing_type == "disabled":
        tracing_config.disable()
        return
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–Ω—Å–æ–ª—å–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞
        tracing_config.configure_console_tracing(tracing_level)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    tracing_config.apply()


def get_tracing_config() -> TracingConfig:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏."""
    return tracing_config 