"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import asyncio
import sys
import argparse
import os
from src.demo.chat_demo import run_chat_demo
from src.config.openrouter_config import Config
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
from src.utils.logger import logger

def parse_arguments():
    """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(description="OpenRouter Agents Demo")
    parser.add_argument(
        "--path", "-p",
        type=str,
        help="–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)"
    )
    parser.add_argument(
        "--config", "-c",
        type=str,
        default="config.yaml",
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é config.yaml)"
    )
    parser.add_argument(
        "--agent", "-a",
        type=str,
        help="–ò–º—è –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)"
    )
    parser.add_argument(
        "--context-path",
        type=str,
        help="–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É"
    )
    return parser.parse_args()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = parse_arguments()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –ø–µ—Ä–µ–¥ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º
        logger._setup_logging()
        print(f"üîç –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {'–≤–∫–ª—é—á–µ–Ω–æ' if logger.debug_enabled else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        working_dir = args.path or os.getcwd()
        print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {working_dir}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config()
        
        print("üöÄ OpenRouter Agents Demo")
        print("========================")
        print(f"ü§ñ –ú–æ–¥–µ–ª—å: {config.model_name}")
        print(f"üîó API: {config.base_url}")
        print(f"üìÇ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {args.config}")
        if args.context_path:
            print(f"üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—É—Ç—å: {args.context_path}")
        print()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —á–∞—Ç-–¥–µ–º–æ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø—É—Ç–µ–π
        await run_chat_demo(
            working_directory=working_dir,
            config_path=args.config,
            agent_name=args.agent,
            context_path=args.context_path
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        pass


if __name__ == "__main__":
    asyncio.run(main())