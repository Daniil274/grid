"""
–§–∞–±—Ä–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ MCP.
"""

import asyncio
import os
from typing import List, Any, Optional
from dotenv import load_dotenv
from openai import AsyncOpenAI
from agents import Agent, OpenAIChatCompletionsModel, set_tracing_disabled

from config_loader import config, AgentConfig
from tools import get_tools_by_names
from mcp_client import MCPClient

load_dotenv()

class AgentFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    
    def __init__(self, working_directory: Optional[str] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏."""
        set_tracing_disabled(True)
        self.mcp_clients = {}
        self.agent_cache = {}
        self.agent_tools_cache = {}
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞
        if working_directory:
            config.set_working_directory(working_directory)
    
    async def create_agent(self, agent_key: str, context_path: Optional[str] = None) -> Agent:
        """–°–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ –∫–ª—é—á—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        agent_config = config.get_agent(agent_key)
        model_config = config.get_model(agent_config.model)
        provider_config = config.get_provider(model_config.provider)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        api_key = config.get_api_key(model_config.provider)
        if not api_key:
            raise ValueError(f"‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {provider_config.name}. "
                           f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é {provider_config.api_key_env}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = AsyncOpenAI(
            api_key=api_key,
            base_url=provider_config.base_url,
            timeout=provider_config.timeout,
            max_retries=provider_config.max_retries
        )
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã temperature –∏ max_tokens –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ)
        model = OpenAIChatCompletionsModel(
            model=model_config.name,
            openai_client=client
        )
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –ø—É—Ç–µ–π
        instructions = self._build_agent_prompt_with_paths(agent_key, context_path)
        
        # –õ–æ–≥–≥–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∞–≥–µ–Ω—Ç–∞
        from utils.logger import log_agent_prompt
        log_agent_prompt(agent_config.name, instructions)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools = await self._get_agent_tools(agent_config)
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = Agent(
            name=agent_config.name,
            instructions=instructions,
            model=model,
            tools=tools
        )
        
        return agent
    
    def _build_agent_prompt_with_paths(self, agent_key: str, context_path: Optional[str] = None) -> str:
        """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –∞–≥–µ–Ω—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—É—Ç—è—Ö."""
        base_instructions = config.build_agent_prompt(agent_key)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Ç—è—Ö
        path_info = self._get_path_context(context_path)
        
        if path_info:
            full_instructions = f"{base_instructions}\n\n{path_info}"
        else:
            full_instructions = base_instructions
        
        return full_instructions
    
    def _get_path_context(self, context_path: Optional[str] = None) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—É—Ç—è—Ö."""
        working_dir = config.get_working_directory()
        config_dir = config.get_config_directory()
        
        path_context = [
            "üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É—Ç—è—Ö:",
            f"   –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {working_dir}",
            f"   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_dir}"
        ]
        
        if context_path:
            absolute_context_path = config.get_absolute_path(context_path)
            path_context.append(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—É—Ç—å: {context_path}")
            path_context.append(f"   –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—É—Ç—å: {absolute_context_path}")
        
        path_context.append("")
        path_context.append("üí° –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –ø—É—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏.")
        
        return "\n".join(path_context)
    
    async def _get_agent_tools(self, agent_config: AgentConfig) -> List[Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–≥–µ–Ω—Ç–∞ (function tools + MCP + agents as tools)."""
        tools = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º function tools
        function_tools = []
        mcp_tools = []
        agent_tools = []
        
        for tool_name in agent_config.tools:
            tool_config = config._config.get('tools', {}).get(tool_name, {})
            
            if tool_config.get('type') == 'function':
                function_tools.append(tool_name)
            elif tool_config.get('type') == 'mcp':
                mcp_tools.append(tool_name)
            elif tool_config.get('type') == 'agent':
                agent_tools.append(tool_name)
        
        # –ü–æ–ª—É—á–∞–µ–º function tools
        if function_tools:
            tools.extend(get_tools_by_names(function_tools))
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        if agent_tools:
            agent_tools_list = await self._create_agent_tools(agent_tools)
            tools.extend(agent_tools_list)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä—ã
        if mcp_tools and (agent_config.mcp_enabled or config.is_mcp_enabled()):
            for tool_name in mcp_tools:
                mcp_client = await self._get_mcp_client(tool_name)
                if mcp_client:
                    mcp_tools_list = await mcp_client.get_tools()
                    tools.extend(mcp_tools_list)
        
        return tools
    
    async def _create_agent_tools(self, agent_keys: List[str]) -> List[Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–∞—Ö."""
        tools = []
        
        for agent_key in agent_keys:
            if agent_key not in self.agent_tools_cache:
                # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
                agent = await self.create_agent(agent_key)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                tool_config = config._config.get('tools', {}).get(agent_key, {})
                tool_name = tool_config.get('name', f"call_{agent_key}")
                tool_description = tool_config.get('description', f"–í—ã–∑—ã–≤–∞–µ—Ç {agent.name} –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á")
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ –∞–≥–µ–Ω—Ç–∞
                agent_tool = agent.as_tool(
                    tool_name=tool_name,
                    tool_description=tool_description
                )
                
                self.agent_tools_cache[agent_key] = agent_tool
            
            tools.append(self.agent_tools_cache[agent_key])
        
        return tools
    
    async def _get_mcp_client(self, tool_name: str) -> MCPClient:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç MCP –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
        if tool_name in self.mcp_clients:
            return self.mcp_clients[tool_name]
        
        tool_config = config._config.get('tools', {}).get(tool_name, {})
        if tool_config.get('type') != 'mcp':
            return None
        
        server_command = tool_config.get('server_command', [])
        env_vars = tool_config.get('env_vars', {})
        
        # –°–æ–∑–¥–∞–µ–º MCP –∫–ª–∏–µ–Ω—Ç–∞
        mcp_client = MCPClient(tool_name, server_command, env_vars)
        
        try:
            await mcp_client.connect()
            self.mcp_clients[tool_name] = mcp_client
            print(f"‚úÖ MCP —Å–µ—Ä–≤–µ—Ä '{tool_name}' –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return mcp_client
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞ '{tool_name}': {e}")
            return None
    
    async def cleanup(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ MCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        for mcp_client in self.mcp_clients.values():
            await mcp_client.disconnect()
        self.mcp_clients.clear()
        self.agent_cache.clear()
        self.agent_tools_cache.clear()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞
agent_factory = AgentFactory()