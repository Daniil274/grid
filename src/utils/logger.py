"""
–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
"""

import logging
import os
import sys
from pathlib import Path
from typing import Any, Dict
import json
from datetime import datetime
from dotenv import load_dotenv

class AgentLogger:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤."""
    
    _instance = None
    _initialized = False
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(AgentLogger, cls).__new__(cls)
        return cls._instance
    
    def __init__(self):
        if not self._initialized:
            self._setup_logging()
            self._initialized = True
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
        load_dotenv()
        
        # –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        debug_env = os.getenv('DEBUG_LOGGING', 'false').lower() == 'true'
        debug_config = os.getenv('DEBUG', 'false').lower() == 'true'
        self.debug_enabled = debug_env or debug_config
        self.log_level = os.getenv('LOG_LEVEL', 'INFO').upper()
        self.log_agents = os.getenv('LOG_AGENTS', 'true').lower() == 'true'
        self.log_tools = os.getenv('LOG_TOOLS', 'true').lower() == 'true'
        self.log_communications = os.getenv('LOG_COMMUNICATIONS', 'true').lower() == 'true'
        self.log_errors = os.getenv('LOG_ERRORS', 'true').lower() == 'true'
        self.log_file = os.getenv('LOG_FILE')
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger('AgentSystem')
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å DEBUG –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞, —á—Ç–æ–±—ã –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥–∏–ª–∏
        self.logger.setLevel(logging.DEBUG)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.logger.handlers.clear()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formatter = logging.Formatter(
            '%(asctime)s | %(levelname)8s | %(name)s | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ (—Ç–æ–ª—å–∫–æ INFO –∏ –≤—ã—à–µ)
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)
        
        # –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (INFO –∏ –≤—ã—à–µ)
        if not self.log_file:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            self.log_file = f"logs/agents_{timestamp}.log"
            
        if self.log_file:
            log_path = Path(self.log_file)
            log_path.parent.mkdir(parents=True, exist_ok=True)
            file_handler = logging.FileHandler(log_path, encoding='utf-8')
            file_handler.setLevel(logging.INFO)  # INFO –∏ –≤—ã—à–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
            file_handler.setFormatter(formatter)
            self.logger.addHandler(file_handler)
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è DEBUG –ª–æ–≥–æ–≤ (–ø–æ–ª–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã)
        debug_log_file = f"logs/debug_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        debug_log_path = Path(debug_log_file)
        debug_log_path.parent.mkdir(parents=True, exist_ok=True)
        debug_file_handler = logging.FileHandler(debug_log_path, encoding='utf-8')
        debug_file_handler.setLevel(logging.DEBUG)  # –í—Å–µ —É—Ä–æ–≤–Ω–∏ –≤ debug —Ñ–∞–π–ª
        debug_file_handler.setFormatter(formatter)
        self.logger.addHandler(debug_file_handler)
    
    def _should_log(self, category: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        if not self.debug_enabled:
            return False
        
        category_map = {
            'agents': self.log_agents,
            'tools': self.log_tools,
            'communications': self.log_communications,
            'errors': self.log_errors,
            'git_command': self.log_tools,  # Git –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫ —á–∞—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            'file_operation': self.log_tools,  # –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ —á–∞—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            'prompt_building': self.log_agents,  # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –∫–∞–∫ —á–∞—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤
            'agent_creation': self.log_agents,  # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
            'test': True,  # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            'coordinator_prompt': True,  # –ü—Ä–æ–º–ø—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
        }
        
        return category_map.get(category, True)
    
    def log_agent_start(self, agent_name: str, input_data: str):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞."""
        if self._should_log('agents'):
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            agent_logger = logging.getLogger(f'Agent.{agent_name}')
            agent_logger.setLevel(self.logger.level)
            if not agent_logger.handlers:
                for handler in self.logger.handlers:
                    agent_logger.addHandler(handler)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            input_summary = input_data[:100].replace('\n', ' ').strip()
            if len(input_data) > 100:
                input_summary += "..."
            
            agent_logger.info(f"ü§ñ START | üìù {input_summary}")
            agent_logger.debug(f"   üìù Full Input: {input_data}")
    
    def log_agent_end(self, agent_name: str, output_data: str, duration: float):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞."""
        if self._should_log('agents'):
            agent_logger = logging.getLogger(f'Agent.{agent_name}')
            agent_logger.setLevel(self.logger.level)
            if not agent_logger.handlers:
                for handler in self.logger.handlers:
                    agent_logger.addHandler(handler)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            output_summary = output_data[:100].replace('\n', ' ').strip()
            if len(output_data) > 100:
                output_summary += "..."
                    
            agent_logger.info(f"‚úÖ END (took {duration:.2f}s) | üì§ {output_summary}")
            agent_logger.debug(f"   üì§ Full Output: {output_data}")
    
    def log_agent_error(self, agent_name: str, error: Exception):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∞–≥–µ–Ω—Ç–∞."""
        if self._should_log('errors'):
            agent_logger = logging.getLogger(f'Agent.{agent_name}')
            agent_logger.setLevel(self.logger.level)
            if not agent_logger.handlers:
                for handler in self.logger.handlers:
                    agent_logger.addHandler(handler)
                    
            agent_logger.error(f"‚ùå ERROR - {str(error)}")
            agent_logger.debug(f"   üîç Error details:", exc_info=True)
    
    def log_tool_start(self, tool_name: str, args: Dict[str, Any]):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
        if self._should_log('tools'):
            tool_logger = logging.getLogger(f'Tool.{tool_name}')
            tool_logger.setLevel(self.logger.level)
            if not tool_logger.handlers:
                for handler in self.logger.handlers:
                    tool_logger.addHandler(handler)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
            args_summary = str(args)[:100].replace('\n', ' ').strip()
            if len(str(args)) > 100:
                args_summary += "..."
                    
            tool_logger.info(f"üîß START | üìã {args_summary}")
            tool_logger.debug(f"   üìã Full Args: {json.dumps(args, ensure_ascii=False, indent=2)}")
    
    def log_tool_end(self, tool_name: str, result: str, duration: float):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
        if self._should_log('tools'):
            tool_logger = logging.getLogger(f'Tool.{tool_name}')
            tool_logger.setLevel(self.logger.level)
            if not tool_logger.handlers:
                for handler in self.logger.handlers:
                    tool_logger.addHandler(handler)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            result_summary = result[:100].replace('\n', ' ').strip()
            if len(result) > 100:
                result_summary += "..."
                    
            tool_logger.info(f"‚úÖ END (took {duration:.2f}s) | üì§ {result_summary}")
            tool_logger.debug(f"   üì§ Full Result: {result}")
    
    def log_tool_error(self, tool_name: str, error: Exception):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
        if self._should_log('errors'):
            tool_logger = logging.getLogger(f'Tool.{tool_name}')
            tool_logger.setLevel(self.logger.level)
            if not tool_logger.handlers:
                for handler in self.logger.handlers:
                    tool_logger.addHandler(handler)
                    
            tool_logger.error(f"‚ùå ERROR - {str(error)}")
            tool_logger.debug(f"   üîç Error details:", exc_info=True)
    
    def log_communication(self, sender: str, receiver: str, message_type: str, content: str):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏."""
        if self._should_log('communications'):
            self.logger.info(f"üí¨ COMM: {sender} ‚Üí {receiver} ({message_type})")
            self.logger.debug(f"   üìÑ Content: {content[:200]}{'...' if len(content) > 200 else ''}")
    
    def log_context_change(self, context_name: str, old_value: Any, new_value: Any):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
        if self._should_log('agents'):
            self.logger.debug(f"üîÑ CONTEXT_CHANGE: {context_name}")
            self.logger.debug(f"   ‚¨ÖÔ∏è Old: {str(old_value)[:100]}{'...' if len(str(old_value)) > 100 else ''}")
            self.logger.debug(f"   ‚û°Ô∏è New: {str(new_value)[:100]}{'...' if len(str(new_value)) > 100 else ''}")
    
    def log_custom(self, level: str, category: str, message: str, **kwargs):
        """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ."""
        if self._should_log(category):
            log_method = getattr(self.logger, level.lower(), self.logger.info)
            log_method(f"üîπ {category.upper()}: {message}")
            
            for key, value in kwargs.items():
                self.logger.debug(f"   {key}: {value}")
        else:
            # –î–ª—è DEBUG —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ DEBUG –≤–∫–ª—é—á–µ–Ω
            if level.lower() == 'debug' and self.debug_enabled:
                log_method = getattr(self.logger, level.lower(), self.logger.debug)
                log_method(f"üîπ {category.upper()}: {message}")
                
                for key, value in kwargs.items():
                    self.logger.debug(f"   {key}: {value}")
    
    def log_agent_prompt(self, agent_name: str, prompt: str):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∞–≥–µ–Ω—Ç–∞."""
        if self._should_log('agents'):
            agent_logger = logging.getLogger(f'Agent.{agent_name}')
            agent_logger.setLevel(self.logger.level)
            if not agent_logger.handlers:
                for handler in self.logger.handlers:
                    agent_logger.addHandler(handler)
            
            # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å (INFO —É—Ä–æ–≤–µ–Ω—å)
            prompt_summary = prompt[:200].replace('\n', ' ').strip()
            if len(prompt) > 200:
                prompt_summary += "..."
            agent_logger.info(f"üìù PROMPT ({len(prompt)} chars): {prompt_summary}")
            
            # –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ —Ñ–∞–π–ª (DEBUG —É—Ä–æ–≤–µ–Ω—å)
            agent_logger.debug(f"üìÑ FULL PROMPT FOR {agent_name}:")
            agent_logger.debug(f"   {'='*80}")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            lines = prompt.split('\n')
            for i, line in enumerate(lines, 1):
                if line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    agent_logger.debug(f"   {i:3d}: {line}")
                else:
                    agent_logger.debug(f"   {i:3d}: <empty>")
            
            agent_logger.debug(f"   {'='*80}")
            agent_logger.debug(f"üìÑ END OF PROMPT FOR {agent_name}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
logger = AgentLogger()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def log_agent_start(agent_name: str, input_data: str):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞."""
    logger.log_agent_start(agent_name, input_data)

def log_agent_end(agent_name: str, output_data: str, duration: float):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞."""
    logger.log_agent_end(agent_name, output_data, duration)

def log_agent_error(agent_name: str, error: Exception):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∞–≥–µ–Ω—Ç–∞."""
    logger.log_agent_error(agent_name, error)

def log_tool_start(tool_name: str, args: Dict[str, Any]):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
    logger.log_tool_start(tool_name, args)

def log_tool_end(tool_name: str, result: str, duration: float):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
    logger.log_tool_end(tool_name, result, duration)

def log_tool_error(tool_name: str, error: Exception):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
    logger.log_tool_error(tool_name, error)

def log_communication(sender: str, receiver: str, message_type: str, content: str):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏."""
    logger.log_communication(sender, receiver, message_type, content)

def log_context_change(context_name: str, old_value: Any, new_value: Any):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    logger.log_context_change(context_name, old_value, new_value)

def log_custom(level: str, category: str, message: str, **kwargs):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    logger.log_custom(level, category, message, **kwargs)

def log_agent_prompt(agent_name: str, prompt: str):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∞–≥–µ–Ω—Ç–∞."""
    logger.log_agent_prompt(agent_name, prompt)

def log_tool_performance(tool_name: str, operation: str, duration: float, **kwargs):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
    if logger._should_log('tools'):
        tool_logger = logging.getLogger(f'Tool.{tool_name}')
        tool_logger.setLevel(logger.logger.level)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–µ–Ω–¥–ª–µ—Ä—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        if not tool_logger.handlers:
            for handler in logger.logger.handlers:
                tool_logger.addHandler(handler)
        
        tool_logger.debug(f"‚ö° PERFORMANCE: {operation} took {duration:.3f}s")
        for key, value in kwargs.items():
            tool_logger.debug(f"   {key}: {value}")

def log_tool_usage(tool_name: str, args: Dict[str, Any], success: bool, duration: float):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    if logger._should_log('tools'):
        tool_logger = logging.getLogger(f'Tool.{tool_name}')
        tool_logger.setLevel(logger.logger.level)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–µ–Ω–¥–ª–µ—Ä—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        if not tool_logger.handlers:
            for handler in logger.logger.handlers:
                tool_logger.addHandler(handler)
        
        status = "‚úÖ SUCCESS" if success else "‚ùå FAILED"
        tool_logger.info(f"üìä USAGE: {tool_name} - {status} ({duration:.3f}s)")
        tool_logger.debug(f"   üìã Args: {json.dumps(args, ensure_ascii=False, indent=2)}")