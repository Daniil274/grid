"""
–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
"""

import logging
import os
import sys
from pathlib import Path
from typing import Any, Dict
import json
from datetime import datetime
from dotenv import load_dotenv

class AgentLogger:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤."""
    
    _instance = None
    _initialized = False
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(AgentLogger, cls).__new__(cls)
        return cls._instance
    
    def __init__(self):
        if not self._initialized:
            self._setup_logging()
            self._initialized = True
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
        load_dotenv()
        
        # –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
        self.debug_enabled = os.getenv('DEBUG_LOGGING', 'false').lower() == 'true'
        self.log_level = os.getenv('LOG_LEVEL', 'INFO').upper()
        self.log_agents = os.getenv('LOG_AGENTS', 'true').lower() == 'true'
        self.log_tools = os.getenv('LOG_TOOLS', 'true').lower() == 'true'
        self.log_communications = os.getenv('LOG_COMMUNICATIONS', 'true').lower() == 'true'
        self.log_errors = os.getenv('LOG_ERRORS', 'true').lower() == 'true'
        self.log_file = os.getenv('LOG_FILE')
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger('AgentSystem')
        self.logger.setLevel(getattr(logging, self.log_level, logging.INFO))
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.logger.handlers.clear()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formatter = logging.Formatter(
            '%(asctime)s | %(levelname)8s | %(name)s | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)
        
        # –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        if not self.log_file:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            self.log_file = f"logs/agents_{timestamp}.log"
            
        if self.log_file:
            log_path = Path(self.log_file)
            log_path.parent.mkdir(parents=True, exist_ok=True)
            file_handler = logging.FileHandler(log_path, encoding='utf-8')
            file_handler.setFormatter(formatter)
            self.logger.addHandler(file_handler)
    
    def _should_log(self, category: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        if not self.debug_enabled:
            return False
        
        category_map = {
            'agents': self.log_agents,
            'tools': self.log_tools,
            'communications': self.log_communications,
            'errors': self.log_errors
        }
        
        return category_map.get(category, True)
    
    def log_agent_start(self, agent_name: str, input_data: str):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞."""
        if self._should_log('agents'):
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            agent_logger = logging.getLogger(f'Agent.{agent_name}')
            agent_logger.setLevel(self.logger.level)
            if not agent_logger.handlers:
                for handler in self.logger.handlers:
                    agent_logger.addHandler(handler)
            
            agent_logger.info(f"ü§ñ START")
            agent_logger.debug(f"   üìù Input: {input_data[:200]}{'...' if len(input_data) > 200 else ''}")
    
    def log_agent_end(self, agent_name: str, output_data: str, duration: float):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞."""
        if self._should_log('agents'):
            agent_logger = logging.getLogger(f'Agent.{agent_name}')
            agent_logger.setLevel(self.logger.level)
            if not agent_logger.handlers:
                for handler in self.logger.handlers:
                    agent_logger.addHandler(handler)
                    
            agent_logger.info(f"‚úÖ END (took {duration:.2f}s)")
            agent_logger.debug(f"   üì§ Output: {output_data[:200]}{'...' if len(output_data) > 200 else ''}")
    
    def log_agent_error(self, agent_name: str, error: Exception):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∞–≥–µ–Ω—Ç–∞."""
        if self._should_log('errors'):
            agent_logger = logging.getLogger(f'Agent.{agent_name}')
            agent_logger.setLevel(self.logger.level)
            if not agent_logger.handlers:
                for handler in self.logger.handlers:
                    agent_logger.addHandler(handler)
                    
            agent_logger.error(f"‚ùå ERROR - {str(error)}")
            agent_logger.debug(f"   üîç Error details:", exc_info=True)
    
    def log_tool_start(self, tool_name: str, args: Dict[str, Any]):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
        if self._should_log('tools'):
            tool_logger = logging.getLogger(f'Tool.{tool_name}')
            tool_logger.setLevel(self.logger.level)
            if not tool_logger.handlers:
                for handler in self.logger.handlers:
                    tool_logger.addHandler(handler)
                    
            tool_logger.info(f"üîß START")
            tool_logger.debug(f"   üìã Args: {json.dumps(args, ensure_ascii=False, indent=2)}")
    
    def log_tool_end(self, tool_name: str, result: str, duration: float):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
        if self._should_log('tools'):
            tool_logger = logging.getLogger(f'Tool.{tool_name}')
            tool_logger.setLevel(self.logger.level)
            if not tool_logger.handlers:
                for handler in self.logger.handlers:
                    tool_logger.addHandler(handler)
                    
            tool_logger.info(f"‚úÖ END (took {duration:.2f}s)")
            tool_logger.debug(f"   üì§ Result: {result[:200]}{'...' if len(result) > 200 else ''}")
    
    def log_tool_error(self, tool_name: str, error: Exception):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
        if self._should_log('errors'):
            tool_logger = logging.getLogger(f'Tool.{tool_name}')
            tool_logger.setLevel(self.logger.level)
            if not tool_logger.handlers:
                for handler in self.logger.handlers:
                    tool_logger.addHandler(handler)
                    
            tool_logger.error(f"‚ùå ERROR - {str(error)}")
            tool_logger.debug(f"   üîç Error details:", exc_info=True)
    
    def log_communication(self, sender: str, receiver: str, message_type: str, content: str):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏."""
        if self._should_log('communications'):
            self.logger.info(f"üí¨ COMM: {sender} ‚Üí {receiver} ({message_type})")
            self.logger.debug(f"   üìÑ Content: {content[:200]}{'...' if len(content) > 200 else ''}")
    
    def log_context_change(self, context_name: str, old_value: Any, new_value: Any):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
        if self._should_log('agents'):
            self.logger.debug(f"üîÑ CONTEXT_CHANGE: {context_name}")
            self.logger.debug(f"   ‚¨ÖÔ∏è Old: {str(old_value)[:100]}{'...' if len(str(old_value)) > 100 else ''}")
            self.logger.debug(f"   ‚û°Ô∏è New: {str(new_value)[:100]}{'...' if len(str(new_value)) > 100 else ''}")
    
    def log_custom(self, level: str, category: str, message: str, **kwargs):
        """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ."""
        if self._should_log(category):
            log_method = getattr(self.logger, level.lower(), self.logger.info)
            log_method(f"üîπ {category.upper()}: {message}")
            
            for key, value in kwargs.items():
                self.logger.debug(f"   {key}: {value}")
    
    def log_agent_prompt(self, agent_name: str, prompt: str):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∞–≥–µ–Ω—Ç–∞."""
        if self._should_log('agents'):
            agent_logger = logging.getLogger(f'Agent.{agent_name}')
            agent_logger.setLevel(self.logger.level)
            if not agent_logger.handlers:
                for handler in self.logger.handlers:
                    agent_logger.addHandler(handler)
            
            agent_logger.info(f"üìù PROMPT")
            agent_logger.debug(f"   üìÑ Instructions:")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            lines = prompt.split('\n')
            for i, line in enumerate(lines, 1):
                if line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    agent_logger.debug(f"   {i:2d}: {line}")
                else:
                    agent_logger.debug(f"   {i:2d}: <empty>")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
logger = AgentLogger()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def log_agent_start(agent_name: str, input_data: str):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞."""
    logger.log_agent_start(agent_name, input_data)

def log_agent_end(agent_name: str, output_data: str, duration: float):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞."""
    logger.log_agent_end(agent_name, output_data, duration)

def log_agent_error(agent_name: str, error: Exception):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∞–≥–µ–Ω—Ç–∞."""
    logger.log_agent_error(agent_name, error)

def log_tool_start(tool_name: str, args: Dict[str, Any]):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
    logger.log_tool_start(tool_name, args)

def log_tool_end(tool_name: str, result: str, duration: float):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
    logger.log_tool_end(tool_name, result, duration)

def log_tool_error(tool_name: str, error: Exception):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
    logger.log_tool_error(tool_name, error)

def log_communication(sender: str, receiver: str, message_type: str, content: str):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏."""
    logger.log_communication(sender, receiver, message_type, content)

def log_context_change(context_name: str, old_value: Any, new_value: Any):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    logger.log_context_change(context_name, old_value, new_value)

def log_custom(level: str, category: str, message: str, **kwargs):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    logger.log_custom(level, category, message, **kwargs)

def log_agent_prompt(agent_name: str, prompt: str):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∞–≥–µ–Ω—Ç–∞."""
    logger.log_agent_prompt(agent_name, prompt)