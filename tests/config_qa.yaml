# QA конфигурация для тестирования на дешевых моделях
# Использует только flash-lite и claude-haiku для экономии

# Глобальные настройки для QA
settings:
  default_agent: "qa_test_agent"
  max_history: 15
  max_turns: 10
  agent_timeout: 120  # 2 минуты для реальных запросов
  debug: true
  mcp_enabled: true
  working_directory: "/workspaces/grid"
  config_directory: "tests"
  allow_path_override: true
  agent_logging:
    enabled: true
    level: "detailed"
    save_prompts: true
    save_conversations: false
    save_executions: true

# Провайдеры для QA тестирования
providers:
  openrouter:
    name: "openrouter"
    base_url: "https://openrouter.ai/api/v1"
    api_key_env: "OPENROUTER_API_KEY"
    timeout: 300
    max_retries: 3
    streaming_enabled: false

# Только дешевые модели для QA
models:
  flash-lite:
    name: "google/gemini-2.5-flash-lite"
    provider: "openrouter"
    temperature: 0.3
    max_tokens: 4000
    description: "Gemini 2.5 Flash Lite - дешевая модель для QA"

  claude-haiku:
    name: "anthropic/claude-3-haiku"
    provider: "openrouter"
    temperature: 0.2
    max_tokens: 2000
    description: "Claude Haiku - быстрая и дешевая модель"

# QA инструменты (реальные, не моки)
tools:
  # Файловые операции
  file_read:
    type: "function"
    name: "read_file"
    description: "Читает содержимое файла"
    prompt_addition: "Используй read_file(filepath) для чтения файлов."
  
  file_write:
    type: "function"
    name: "write_file"
    description: "Записывает данные в файл"
    prompt_addition: "Используй write_file(filepath, content) для записи файлов."
  
  file_list:
    type: "function"
    name: "list_files"
    description: "Показывает список файлов в директории"
    prompt_addition: "Используй list_files(directory) для просмотра содержимого папок."

  # MCP инструменты для тестирования
  filesystem_mcp:
    type: "mcp"
    server_command: ["npx", "@modelcontextprotocol/server-filesystem", "/workspaces/grid"]
    description: "MCP сервер для работы с файловой системой"
    prompt_addition: "Используй filesystem_mcp для файловых операций через MCP."

  sequential_thinking_mcp:
    type: "mcp"
    server_command: ["npx", "@modelcontextprotocol/server-sequential-thinking"]
    description: "MCP сервер для последовательного мышления"
    prompt_addition: "Используй sequential thinking для анализа и планирования задач."

  # Агенты как инструменты для тестирования координации
  qa_sub_agent:
    type: "agent"
    name: "call_qa_sub_agent"
    description: "Вызывает QA подагента для делегирования задач"
    prompt_addition: "Используй call_qa_sub_agent(task) для делегирования простых задач."
    context_strategy: "minimal"
    context_depth: 3
    include_tool_history: false

# QA промпты
prompt_templates:
  qa_base: |
    Ты QA агент для тестирования системы Grid. Работаешь четко и по протоколу.
    Всегда используй доступные инструменты для выполнения задач.
    Отвечай кратко и структурированно. Сообщай о проблемах если они есть.
  
  qa_with_tools: |
    Ты QA агент с доступом к инструментам. 
    ОБЯЗАТЕЛЬНО используй инструменты для выполнения операций.
    Формат ответа: ДЕЙСТВИЕ -> ИНСТРУМЕНТ -> РЕЗУЛЬТАТ -> СТАТУС
    Статус: SUCCESS/FAILURE/WARNING

  qa_coordinator: |
    Ты QA координатор агентов. Тестируешь взаимодействие между агентами.
    Делегируй задачи подагентам и проверяй результаты.
    Сообщай о любых проблемах в координации.

# QA агенты для тестирования
agents:
  # Основной QA агент
  qa_test_agent:
    name: "QA Тестовый Агент"
    model: "flash-lite"
    tools: ["file_read", "file_write", "file_list", "sequential_thinking_mcp"]
    base_prompt: "qa_with_tools"
    description: "Основной агент для QA тестирования"
    mcp_enabled: true

  # Простой агент без инструментов
  qa_simple_agent:
    name: "QA Простой Агент"
    model: "claude-haiku"
    tools: []
    base_prompt: "qa_base"
    description: "Простой агент для базового QA"
    mcp_enabled: false

  # Агент с MCP инструментами
  qa_mcp_agent:
    name: "QA MCP Агент"
    model: "flash-lite"
    tools: ["filesystem_mcp", "sequential_thinking_mcp"]
    base_prompt: "qa_with_tools"
    description: "Агент для тестирования MCP интеграции"
    mcp_enabled: true

  # Координирующий агент
  qa_coordinator_agent:
    name: "QA Координатор"
    model: "flash-lite"
    tools: ["qa_sub_agent", "sequential_thinking_mcp"]
    base_prompt: "qa_coordinator"
    description: "Агент для тестирования координации"
    mcp_enabled: true

  # Подагент
  qa_sub_agent:
    name: "QA Подагент"
    model: "claude-haiku"
    tools: ["file_read", "file_list"]
    base_prompt: "qa_base"
    custom_prompt: |
      Ты QA подагент. Выполняешь делегированные задачи быстро и точно.
      Используй доступные инструменты. Отвечай в формате: "ЗАДАЧА: [описание] -> РЕЗУЛЬТАТ: [результат] -> СТАТУС: [SUCCESS/FAILURE]"
    description: "Подагент для тестирования делегирования"
    mcp_enabled: false

# QA сценарии тестирования
scenarios:
  basic_qa:
    agent: "qa_simple_agent"
    description: "Базовое QA тестирование без инструментов"
  
  tools_qa:
    agent: "qa_test_agent"
    description: "QA тестирование с инструментами"
  
  mcp_qa:
    agent: "qa_mcp_agent"
    description: "QA тестирование MCP интеграции"
  
  coordination_qa:
    agent: "qa_coordinator_agent"
    description: "QA тестирование координации агентов"