#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞.
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å coverage –∞–Ω–∞–ª–∏–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤.
"""

import argparse
import os
import subprocess
import sys
from pathlib import Path


def run_command(cmd, description=""):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    if description:
        print(f"üîÑ {description}")
    
    print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {cmd}")
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    
    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {description}")
        print(f"Stderr: {result.stderr}")
        return False
    
    if result.stdout:
        print(result.stdout)
    
    return True


def install_coverage():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç coverage –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    try:
        import coverage
        print("‚úÖ Coverage —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError:
        print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º coverage...")
        return run_command("pip install coverage", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ coverage")


def run_tests_with_coverage(test_pattern="", markers="", verbose=False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –ø–æ–∫—Ä—ã—Ç–∏—è."""
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    cmd_parts = ["coverage", "run", "-m", "pytest"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã pytest
    if verbose:
        cmd_parts.append("-v")
    else:
        cmd_parts.append("-q")
    
    if markers:
        cmd_parts.extend(["-m", markers])
    
    if test_pattern:
        cmd_parts.append(test_pattern)
    else:
        cmd_parts.append("tests/")
    
    cmd = " ".join(cmd_parts)
    
    success = run_command(cmd, "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –ø–æ–∫—Ä—ã—Ç–∏—è")
    return success


def generate_coverage_report(format_type="terminal"):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏."""
    if format_type == "terminal":
        return run_command("coverage report -m", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ")
    elif format_type == "html":
        success = run_command("coverage html", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞")
        if success:
            html_path = Path("htmlcov/index.html").absolute()
            print(f"üìä HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {html_path}")
            if os.name == 'nt':  # Windows
                print(f"–û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: file:///{html_path}")
            else:
                print(f"–û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: file://{html_path}")
        return success
    elif format_type == "xml":
        return run_command("coverage xml", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è XML –æ—Ç—á–µ—Ç–∞")
    elif format_type == "json":
        return run_command("coverage json", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –æ—Ç—á–µ—Ç–∞")


def show_coverage_summary():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ –ø–æ–∫—Ä—ã—Ç–∏–∏."""
    print("\n" + "="*60)
    print("üìà –°–í–û–î–ö–ê –ü–û–ö–†–´–¢–ò–Ø –ö–û–î–ê")
    print("="*60)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
    result = subprocess.run(
        "coverage report --format=total", 
        shell=True, 
        capture_output=True, 
        text=True
    )
    
    if result.returncode == 0:
        try:
            total_coverage = int(result.stdout.strip())
            if total_coverage >= 90:
                emoji = "üéâ"
                status = "–û–¢–õ–ò–ß–ù–û"
            elif total_coverage >= 80:
                emoji = "‚úÖ"
                status = "–•–û–†–û–®–û"
            elif total_coverage >= 70:
                emoji = "‚ö†Ô∏è"
                status = "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
            else:
                emoji = "‚ùå"
                status = "–ù–£–ñ–ù–û –£–õ–£–ß–®–ò–¢–¨"
            
            print(f"{emoji} –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {total_coverage}% - {status}")
        except ValueError:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    run_command("coverage report", "")


def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –ø–æ–∫—Ä—ã—Ç–∏—è")
    parser.add_argument(
        "--pattern", 
        default="",
        help="–ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, tests/test_agents.py)"
    )
    parser.add_argument(
        "--markers", 
        default="",
        help="–ú–∞—Ä–∫–µ—Ä—ã pytest (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'unit', 'not integration')"
    )
    parser.add_argument(
        "--format", 
        choices=["terminal", "html", "xml", "json", "all"],
        default="terminal",
        help="–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏"
    )
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    parser.add_argument(
        "--no-tests",
        action="store_true",
        help="–¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤)"
    )
    parser.add_argument(
        "--install-deps",
        action="store_true",
        help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"
    )
    
    args = parser.parse_args()
    
    print("üß™ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–ö–†–´–¢–ò–Ø –¢–ï–°–¢–ê–ú–ò")
    print("="*50)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if args.install_deps:
        if not install_coverage():
            sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ coverage
    if not install_coverage():
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    if not args.no_tests:
        success = run_tests_with_coverage(
            test_pattern=args.pattern,
            markers=args.markers,
            verbose=args.verbose
        )
        
        if not success:
            print("‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
    print("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏...")
    
    if args.format == "all":
        formats = ["terminal", "html", "xml", "json"]
    else:
        formats = [args.format]
    
    for fmt in formats:
        if not generate_coverage_report(fmt):
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {fmt} –æ—Ç—á–µ—Ç")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    show_coverage_summary()
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("- –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ –ø–æ–∫—Ä—ã—Ç–∏—é 80%+ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    print("- –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ integration —Ç–µ—Å—Ç—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")


if __name__ == "__main__":
    main() 