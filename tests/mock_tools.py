"""
–ú–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã Grid.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""

import asyncio
import json
import os
import re
from typing import Dict, List, Any, Optional
from unittest.mock import AsyncMock


class MockFileSystem:
    """–ú–æ–∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self):
        self.files: Dict[str, str] = {}
        self.directories: Dict[str, List[str]] = {}
    
    def create_file(self, path: str, content: str):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –≤ –º–æ–∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ."""
        self.files[path] = content
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dir_path = os.path.dirname(path)
        filename = os.path.basename(path)
        
        if dir_path not in self.directories:
            self.directories[dir_path] = []
        
        if filename not in self.directories[dir_path]:
            self.directories[dir_path].append(filename)
    
    def file_exists(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞."""
        return path in self.files
    
    def read_file(self, path: str) -> Optional[str]:
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞."""
        return self.files.get(path)
    
    def list_directory(self, path: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        return self.directories.get(path, [])
    
    def search_content(self, pattern: str, directory: str = None) -> List[str]:
        """–ò—â–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–æ–≤."""
        results = []
        
        for file_path, content in self.files.items():
            if directory and not file_path.startswith(directory):
                continue
            
            if pattern.lower() in content.lower():
                results.append(file_path)
        
        return results


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –º–æ–∫ —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
mock_fs = MockFileSystem()


async def mock_read_file(filepath: str) -> str:
    """–ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞."""
    await asyncio.sleep(0.01)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    
    if not mock_fs.file_exists(filepath):
        return f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª '{filepath}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ."
    
    content = mock_fs.read_file(filepath)
    return f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{filepath}':\n{content}"


async def mock_write_file(filepath: str, content: str) -> str:
    """–ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞."""
    await asyncio.sleep(0.01)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    
    mock_fs.create_file(filepath, content)
    return f"‚úÖ –§–∞–π–ª '{filepath}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ —Ç–µ—Å—Ç–æ–≤—É—é —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É. –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤."


async def mock_list_files(directory: str) -> str:
    """–ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤."""
    await asyncio.sleep(0.01)
    
    files = mock_fs.list_directory(directory)
    
    if not files:
        return f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{directory}' –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ."
    
    files_list = "\n".join(f"  - {file}" for file in files)
    return f"üìÅ –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{directory}':\n{files_list}"


async def mock_get_file_info(filepath: str) -> str:
    """–ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ."""
    await asyncio.sleep(0.01)
    
    if not mock_fs.file_exists(filepath):
        return f"‚ùå –§–∞–π–ª '{filepath}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ."
    
    content = mock_fs.read_file(filepath)
    size = len(content)
    lines = content.count('\n') + 1 if content else 0
    
    return f"""üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ '{filepath}':
  - –†–∞–∑–º–µ—Ä: {size} —Å–∏–º–≤–æ–ª–æ–≤
  - –°—Ç—Ä–æ–∫: {lines}
  - –¢–∏–ø: —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (—Ç–µ—Å—Ç–æ–≤—ã–π)"""


async def mock_search_files(search_pattern: str, directory: str, use_regex: bool = False, search_in_content: bool = False) -> str:
    """–ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤."""
    await asyncio.sleep(0.01)
    
    if search_in_content:
        # –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        results = mock_fs.search_content(search_pattern, directory)
        if results:
            files_list = "\n".join(f"  - {file}" for file in results)
            return f"üîç –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º '{search_pattern}':\n{files_list}"
        else:
            return f"‚ùå –§–∞–π–ª—ã —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º '{search_pattern}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    else:
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∞–º —Ñ–∞–π–ª–æ–≤
        all_files = mock_fs.list_directory(directory)
        if use_regex:
            try:
                pattern = re.compile(search_pattern, re.IGNORECASE)
                results = [f for f in all_files if pattern.search(f)]
            except re.error:
                return f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {search_pattern}"
        else:
            results = [f for f in all_files if search_pattern.lower() in f.lower()]
        
        if results:
            files_list = "\n".join(f"  - {file}" for file in results)
            return f"üîç –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É '{search_pattern}':\n{files_list}"
        else:
            return f"‚ùå –§–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É '{search_pattern}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."


async def mock_edit_file_patch(filepath: str, patch_content: str) -> str:
    """–ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–∞—Ç—á–µ–º."""
    await asyncio.sleep(0.02)
    
    if not mock_fs.file_exists(filepath):
        return f"‚ùå –§–∞–π–ª '{filepath}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ç—á–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    current_content = mock_fs.read_file(filepath)
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ –ø–∞—Ç—á–µ
    patch_lines = patch_content.split('\n')
    old_line = None
    new_line = None
    
    for line in patch_lines:
        if line.startswith('-') and not line.startswith('---'):
            old_line = line[1:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '-'
        elif line.startswith('+') and not line.startswith('+++'):
            new_line = line[1:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '+'
    
    if old_line and new_line:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–º–µ–Ω—É
        updated_content = current_content.replace(old_line, new_line)
        mock_fs.create_file(filepath, updated_content)
        return f"‚úÖ –ü–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ —Ñ–∞–π–ª—É '{filepath}'. –ó–∞–º–µ–Ω–µ–Ω–æ: '{old_line}' ‚Üí '{new_line}'"
    else:
        return f"‚ö†Ô∏è –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ —Ñ–∞–π–ª—É '{filepath}' (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)."


# Git –æ–ø–µ—Ä–∞—Ü–∏–∏ (–º–æ–∫–∏)

class MockGitRepository:
    """–ú–æ–∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self):
        self.staged_files: List[str] = []
        self.commits: List[Dict] = []
        self.branches: List[str] = ["main"]
        self.current_branch = "main"
        self.status_message = "working tree clean"
    
    def add_file(self, filepath: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ –∏–Ω–¥–µ–∫—Å."""
        if filepath not in self.staged_files:
            self.staged_files.append(filepath)
    
    def add_all(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –∏–Ω–¥–µ–∫—Å."""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.staged_files = ["test_file.txt", "another_file.py"]
    
    def commit(self, message: str, author_name: str, author_email: str):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–∏—Ç."""
        commit = {
            "message": message,
            "author": f"{author_name} <{author_email}>",
            "files": self.staged_files.copy(),
            "timestamp": "2023-01-01T10:00:00Z"
        }
        self.commits.append(commit)
        self.staged_files.clear()
        return commit


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
mock_git = MockGitRepository()


async def mock_git_status(directory: str) -> str:
    """–ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ Git."""
    await asyncio.sleep(0.01)
    
    staged_count = len(mock_git.staged_files)
    branch = mock_git.current_branch
    
    if staged_count > 0:
        staged_list = "\n".join(f"  - {file}" for file in mock_git.staged_files)
        return f"""üìã Git —Å—Ç–∞—Ç—É—Å (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π):
–í–µ—Ç–∫–∞: {branch}
–§–∞–π–ª—ã –≤ –∏–Ω–¥–µ–∫—Å–µ ({staged_count}):
{staged_list}"""
    else:
        return f"üìã Git —Å—Ç–∞—Ç—É—Å: –≤–µ—Ç–∫–∞ '{branch}', —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)."


async def mock_git_add_file(directory: str, filename: str) -> str:
    """–ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ Git."""
    await asyncio.sleep(0.01)
    
    mock_git.add_file(filename)
    return f"‚úÖ –§–∞–π–ª '{filename}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–¥–µ–∫—Å Git (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)."


async def mock_git_add_all(directory: str) -> str:
    """–ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ Git."""
    await asyncio.sleep(0.01)
    
    mock_git.add_all()
    files_count = len(mock_git.staged_files)
    return f"‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–Ω–¥–µ–∫—Å Git. –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_count} (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)."


async def mock_git_commit(directory: str, message: str, author_name: str, author_email: str) -> str:
    """–ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞ Git."""
    await asyncio.sleep(0.02)
    
    if not mock_git.staged_files:
        return "‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ –¥–ª—è –∫–æ–º–º–∏—Ç–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)."
    
    commit = mock_git.commit(message, author_name, author_email)
    files_count = len(commit["files"])
    
    return f"""‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π):
  - –°–æ–æ–±—â–µ–Ω–∏–µ: {message}
  - –ê–≤—Ç–æ—Ä: {author_name} <{author_email}>
  - –§–∞–π–ª–æ–≤: {files_count}
  - ID: test-commit-{len(mock_git.commits)}"""


async def mock_git_log(directory: str, max_commits: int = 10) -> str:
    """–ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤ Git."""
    await asyncio.sleep(0.01)
    
    if not mock_git.commits:
        return "üìú –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤ –ø—É—Å—Ç–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)."
    
    recent_commits = mock_git.commits[-max_commits:]
    
    log_lines = []
    for i, commit in enumerate(reversed(recent_commits)):
        commit_id = f"test-commit-{len(mock_git.commits) - i}"
        log_lines.append(f"–ö–æ–º–º–∏—Ç {commit_id}: {commit['message']} ({commit['author']})")
    
    return f"üìú –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π):\n" + "\n".join(log_lines)


# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä (–º–æ–∫)

async def mock_calculate(expression: str) -> str:
    """–ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
    await asyncio.sleep(0.01)
    
    # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        allowed_chars = set('0123456789+-*/().= ')
        if all(c in allowed_chars for c in expression):
            # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            clean_expr = expression.replace('=', '').strip()
            result = eval(clean_expr)
            return f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è '{expression}': {result}"
        else:
            return f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: '{expression}'"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è '{expression}': {str(e)}"


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

MOCK_TOOLS = {
    "test_file_read": mock_read_file,
    "test_file_write": mock_write_file,
    "test_file_list": mock_list_files,
    "test_file_info": mock_get_file_info,
    "test_file_search": mock_search_files,
    "test_file_edit": mock_edit_file_patch,
    "test_git_status": mock_git_status,
    "test_git_add_file": mock_git_add_file,
    "test_git_add_all": mock_git_add_all,
    "test_git_commit": mock_git_commit,
    "test_git_log": mock_git_log,
    "test_calculate": mock_calculate,
}


def get_mock_tool(tool_name: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –º–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏."""
    return MOCK_TOOLS.get(tool_name)


def reset_mock_state():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –º–æ–∫–æ–≤."""
    global mock_fs, mock_git
    mock_fs = MockFileSystem()
    mock_git = MockGitRepository()


def setup_mock_data():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–∫–æ–≤."""
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    mock_fs.create_file("/tmp/test/config.json", '{"setting": "value"}')
    mock_fs.create_file("/tmp/test/data.txt", "Sample data\nLine 2\nLine 3")
    mock_fs.create_file("/tmp/test/readme.md", "# Test Project\nDescription")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    mock_git.status_message = "–ù–∞ –≤–µ—Ç–∫–µ main. –ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è push."