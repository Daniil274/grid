#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫–∞—é—â–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã Grid.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
"""

import argparse
import asyncio
import os
import sys
import time
from pathlib import Path
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from tests.test_framework import AgentTestSuite, TestEnvironment
from tests.test_agents import TestAgents
from tests.test_tools import TestFileTools, TestGitTools
from tests.test_context import TestContextManager


class TestRunner:
    """–ó–∞–ø—É—Å–∫–∞—é—â–∏–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ Grid."""
    
    def __init__(self, config_path: str = "tests/config_test.yaml"):
        self.config_path = config_path
        self.results: List[Dict] = []
    
    async def run_unit_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."""
        print("üß™ –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        
        suite = AgentTestSuite("Unit Tests", self.config_path)
        results = await suite.run_all()
        summary = suite.get_summary()
        
        self.results.append({
            "category": "unit",
            "summary": summary,
            "details": results
        })
        
        return summary
    
    async def run_agent_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤."""
        print("ü§ñ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤...")
        
        async with TestEnvironment(self.config_path) as env:
            test_cases = [
                ("simple_agent", "test_simple_agent", "–ü—Ä–æ—Å—Ç–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ"),
                ("file_agent", "test_file_agent", "–§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"),
                ("calculator_agent", "test_calculator_agent", "–í—ã—á–∏—Å–ª–µ–Ω–∏—è"),
                ("coordinator_agent", "test_coordinator_agent", "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤"),
                ("full_agent", "test_full_agent", "–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª")
            ]
            
            results = []
            
            for test_name, agent_key, description in test_cases:
                try:
                    start_time = time.time()
                    
                    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –º–æ–∫–∞
                    env.set_mock_responses([f"–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {agent_key}"])
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
                    response = await env.agent_factory.run_agent(
                        agent_key, 
                        f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {test_name}"
                    )
                    
                    duration = time.time() - start_time
                    
                    results.append({
                        "test_name": test_name,
                        "agent_key": agent_key,
                        "description": description,
                        "success": response is not None,
                        "duration": duration,
                        "response_length": len(response) if response else 0
                    })
                    
                    print(f"  ‚úÖ {test_name}: {duration:.2f}s")
                    
                except Exception as e:
                    results.append({
                        "test_name": test_name,
                        "agent_key": agent_key,
                        "description": description,
                        "success": False,
                        "error": str(e),
                        "duration": 0
                    })
                    print(f"  ‚ùå {test_name}: {e}")
        
        summary = {
            "category": "agents",
            "total_tests": len(results),
            "passed": sum(1 for r in results if r.get("success", False)),
            "failed": sum(1 for r in results if not r.get("success", False)),
            "total_duration": sum(r.get("duration", 0) for r in results),
            "results": results
        }
        
        self.results.append(summary)
        return summary
    
    async def run_tool_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
        print("üîß –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        import tempfile
        import os
        
        temp_dir = tempfile.mkdtemp(prefix="grid_tool_test_")
        
        try:
            test_cases = [
                ("file_read_write", self._test_file_operations, temp_dir),
                ("file_list", self._test_file_listing, temp_dir),
                ("tool_loading", self._test_tool_loading, None)
            ]
            
            results = []
            
            for test_name, test_func, test_arg in test_cases:
                try:
                    start_time = time.time()
                    success = await test_func(test_arg) if test_arg else await test_func()
                    duration = time.time() - start_time
                    
                    results.append({
                        "test_name": test_name,
                        "success": success,
                        "duration": duration
                    })
                    
                    print(f"  ‚úÖ {test_name}: {duration:.2f}s")
                    
                except Exception as e:
                    results.append({
                        "test_name": test_name,
                        "success": False,
                        "error": str(e),
                        "duration": 0
                    })
                    print(f"  ‚ùå {test_name}: {e}")
        
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            import shutil
            if os.path.exists(temp_dir):
                shutil.rmtree(temp_dir, ignore_errors=True)
        
        summary = {
            "category": "tools",
            "total_tests": len(results),
            "passed": sum(1 for r in results if r.get("success", False)),
            "failed": sum(1 for r in results if not r.get("success", False)),
            "total_duration": sum(r.get("duration", 0) for r in results),
            "results": results
        }
        
        self.results.append(summary)
        return summary
    
    async def _test_file_operations(self, temp_dir: str) -> bool:
        """–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
        from tests.mock_tools import mock_write_file, mock_read_file
        
        test_file = os.path.join(temp_dir, "test.txt")
        test_content = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        write_result = await mock_write_file(test_file, test_content)
        if "–æ—à–∏–±–∫–∞" in write_result.lower():
            return False
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        read_result = await mock_read_file(test_file)
        return test_content in read_result
    
    async def _test_file_listing(self, temp_dir: str) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤."""
        from tests.mock_tools import mock_list_files
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –º–æ–∫ —Å–∏—Å—Ç–µ–º—É
        from tests.mock_tools import mock_fs
        for i in range(3):
            test_file = os.path.join(temp_dir, f"file_{i}.txt")
            mock_fs.create_file(test_file, f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ {i}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫
        result = await mock_list_files(temp_dir)
        return "file_0.txt" in result and "file_1.txt" in result
    
    async def _test_tool_loading(self) -> bool:
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
        from tools import get_tools_by_names
        
        try:
            tools = get_tools_by_names(["read_file", "write_file"])
            return len(tools) >= 0  # –ú–æ–∂–µ—Ç –±—ã—Ç—å 0 –µ—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        except Exception:
            return False
    
    async def run_integration_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."""
        print("üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        
        async with TestEnvironment(self.config_path) as env:
            test_cases = [
                ("config_integration", self._test_config_integration, env),
                ("agent_coordination", self._test_agent_coordination, env),
                ("context_persistence", self._test_context_persistence, env)
            ]
            
            results = []
            
            for test_name, test_func, test_env in test_cases:
                try:
                    start_time = time.time()
                    success = await test_func(test_env)
                    duration = time.time() - start_time
                    
                    results.append({
                        "test_name": test_name,
                        "success": success,
                        "duration": duration
                    })
                    
                    print(f"  ‚úÖ {test_name}: {duration:.2f}s")
                    
                except Exception as e:
                    results.append({
                        "test_name": test_name,
                        "success": False,
                        "error": str(e),
                        "duration": 0
                    })
                    print(f"  ‚ùå {test_name}: {e}")
        
        summary = {
            "category": "integration",
            "total_tests": len(results),
            "passed": sum(1 for r in results if r.get("success", False)),
            "failed": sum(1 for r in results if not r.get("success", False)),
            "total_duration": sum(r.get("duration", 0) for r in results),
            "results": results
        }
        
        self.results.append(summary)
        return summary
    
    async def _test_config_integration(self, env: TestEnvironment) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            default_agent = env.config.get_default_agent()
            max_turns = env.config.get_max_turns()
            timeout = env.config.get_agent_timeout()
            
            return (default_agent == "test_simple_agent" and 
                   max_turns == 5 and 
                   timeout == 30)
        except Exception:
            return False
    
    async def _test_agent_coordination(self, env: TestEnvironment) -> bool:
        """–¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤."""
        try:
            env.set_mock_responses(["–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"])
            
            response = await env.agent_factory.run_agent(
                "test_coordinator_agent",
                "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è"
            )
            
            return response is not None
        except Exception:
            return False
    
    async def _test_context_persistence(self, env: TestEnvironment) -> bool:
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            env.agent_factory.add_to_context("user", "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_info = env.agent_factory.get_context_info()
            return context_info["message_count"] >= 1
        except Exception:
            return False
    
    def print_summary(self):
        """–ü–µ—á–∞—Ç—å –æ–±—â–µ–π —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        print("\n" + "="*60)
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        total_tests = 0
        total_passed = 0
        total_failed = 0
        total_duration = 0
        
        for result in self.results:
            category = result["category"]
            passed = result.get("passed", 0)
            failed = result.get("failed", 0)
            duration = result.get("total_duration", 0)
            
            total_tests += passed + failed
            total_passed += passed
            total_failed += failed
            total_duration += duration
            
            status = "‚úÖ" if failed == 0 else "‚ö†Ô∏è" if passed > failed else "‚ùå"
            
            print(f"{status} {category.upper():15} | "
                  f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed:3d} | "
                  f"–û—à–∏–±–æ–∫: {failed:3d} | "
                  f"–í—Ä–µ–º—è: {duration:6.2f}s")
        
        print("-" * 60)
        
        overall_status = "‚úÖ" if total_failed == 0 else "‚ö†Ô∏è" if total_passed > total_failed else "‚ùå"
        success_rate = (total_passed / total_tests * 100) if total_tests > 0 else 0
        
        print(f"{overall_status} –û–ë–©–ò–ô –ò–¢–û–ì:     | "
              f"–ü—Ä–æ–π–¥–µ–Ω–æ: {total_passed:3d} | "
              f"–û—à–∏–±–æ–∫: {total_failed:3d} | "
              f"–í—Ä–µ–º—è: {total_duration:6.2f}s")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if total_failed > 0:
            print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {total_failed} –æ—à–∏–±–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ.")
        else:
            print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        print("="*60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã Grid")
    parser.add_argument("--config", default="tests/config_test.yaml", 
                       help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É")
    parser.add_argument("--type", choices=["all", "unit", "agents", "tools", "integration"], 
                       default="all", help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--verbose", "-v", action="store_true", 
                       help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    
    args = parser.parse_args()
    
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Grid")
    print(f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {args.config}")
    print(f"üéØ –¢–∏–ø —Ç–µ—Å—Ç–æ–≤: {args.type}")
    print("-" * 60)
    
    runner = TestRunner(args.config)
    
    start_time = time.time()
    
    try:
        if args.type in ["all", "unit"]:
            await runner.run_unit_tests()
        
        if args.type in ["all", "agents"]:
            await runner.run_agent_tests()
        
        if args.type in ["all", "tools"]:
            await runner.run_tool_tests()
        
        if args.type in ["all", "integration"]:
            await runner.run_integration_tests()
    
    except KeyboardInterrupt:
        print("\n‚è∏Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    finally:
        total_time = time.time() - start_time
        print(f"\n‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f}s")
        runner.print_summary()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã
    total_failed = sum(r.get("failed", 0) for r in runner.results)
    return 1 if total_failed > 0 else 0


if __name__ == "__main__":
    sys.exit(asyncio.run(main()))