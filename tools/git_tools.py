"""
Git –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
- –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤
- –†–∞–∑–ª–∏—á–∏—è –≤ —Ñ–∞–π–ª–∞—Ö
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç–∫–∞–º–∏
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –∏–º–µ–Ω–∞—Ö –∞–≤—Ç–æ—Ä–æ–≤ –∏ –≤–µ—Ç–æ–∫
"""

import re
import subprocess
import time
from pathlib import Path
from typing import List, Dict, Any, Optional
from agents import function_tool
from utils.pretty_logger import pretty_logger, log_tool_start, log_tool_result

def _run_git_command(command: List[str], cwd: Optional[str] = None) -> Dict[str, Any]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ Git –∫–æ–º–∞–Ω–¥—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.
    
    Args:
        command: –°–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        cwd: –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {"success": bool, "output": str, "error": str}
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å git
        if not command or command[0] != "git":
            return {"success": False, "output": "", "error": "–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'git'"}
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        dangerous_commands = ["rm", "clean", "reset --hard", "push --force", "rebase -i"]
        cmd_str = " ".join(command)
        for dangerous in dangerous_commands:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º, –∞ –Ω–µ —á–∞—Å—Ç—å—é –¥—Ä—É–≥–æ–≥–æ
            if f" {dangerous} " in f" {cmd_str} " or cmd_str.endswith(f" {dangerous}") or cmd_str.startswith(f"{dangerous} "):
                return {"success": False, "output": "", "error": f"–û–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {dangerous}"}
        
        # –õ–æ–≥–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        from utils.logger import log_custom
        log_custom('debug', 'git_command', f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {' '.join(command)}", cwd=cwd)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        result = subprocess.run(
            command,
            cwd=cwd,
            capture_output=True,
            text=True,
            encoding='utf-8',
            timeout=30
        )
        
        # –õ–æ–≥–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.returncode == 0:
            log_custom('debug', 'git_command', f"–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {' '.join(command)}")
        else:
            log_custom('debug', 'git_command', f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {' '.join(command)}", error=result.stderr)
        
        return {
            "success": result.returncode == 0,
            "output": result.stdout.strip(),
            "error": result.stderr.strip()
        }
        
    except subprocess.TimeoutExpired:
        from utils.logger import log_custom
        log_custom('error', 'git_command', f"–¢–∞–π–º–∞—É—Ç –∫–æ–º–∞–Ω–¥—ã: {' '.join(command)}")
        return {"success": False, "output": "", "error": "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"}
    except Exception as e:
        from utils.logger import log_custom
        log_custom('error', 'git_command', f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {' '.join(command)}", error=str(e))
        return {"success": False, "output": "", "error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"}

@function_tool
def git_status(directory: str = ".") -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        
    Returns:
        str: –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    """

    
    operation = pretty_logger.tool_start("GitStatus", directory=directory)
    
    try:
        path = Path(directory)
        if not path.exists():
            pretty_logger.tool_result(operation, error=f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        git_dir = path / ".git"
        if not git_dir.exists():
            pretty_logger.tool_result(operation, error=f"{directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º")
            return f"‚ùå {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
        

        
        cmd_result = _run_git_command(["git", "status", "--porcelain"], cwd=str(path))
        
        if not cmd_result["success"]:
            pretty_logger.tool_result(operation, error=cmd_result['error'])
            return f"‚ùå –û—à–∏–±–∫–∞ Git: {cmd_result['error']}"
        

        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        if not cmd_result["output"]:
            pretty_logger.tool_result(operation, result="–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —á–∏—Å—Ç—ã–π")
            return "‚úÖ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è - –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        else:
            lines = cmd_result["output"].split('\n')
            status_map = {
                'M': '–∏–∑–º–µ–Ω–µ–Ω',
                'A': '–¥–æ–±–∞–≤–ª–µ–Ω', 
                'D': '—É–¥–∞–ª–µ–Ω',
                'R': '–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω',
                'C': '—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω',
                '??': '–Ω–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π'
            }
            
            formatted_lines = []
            for line in lines:
                if len(line) < 3:
                    continue
                status_code = line[:2].strip()
                filename_start = 2
                while filename_start < len(line) and line[filename_start] == ' ':
                    filename_start += 1
                filename = line[filename_start:].strip()
                status_text = status_map.get(status_code, status_code)
                formatted_lines.append(f"  üìù {status_text}: {filename}")
            
            changes_count = len(formatted_lines)
            pretty_logger.tool_result(operation, result=f"–ù–∞–π–¥–µ–Ω–æ {changes_count} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            result = f"üìã –°—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ {directory} ({changes_count} –∏–∑–º–µ–Ω–µ–Ω–∏–π):\n\n" + "\n".join(formatted_lines)
        
        return result
        
    except Exception as e:
        pretty_logger.tool_result(operation, error=str(e))
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ Git: {str(e)}"

@function_tool
def git_log(directory: str = ".", max_commits: int = 10) -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–∏—Ç–æ–≤.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        max_commits: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Returns:
        str: –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤
    """
    start_time = time.time()
    args = {"directory": directory, "max_commits": max_commits}
    operation = log_tool_start("git_log", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, error=result)
            return result
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        max_commits = min(max_commits, 50)
        
        cmd_result = _run_git_command([
            "git", "log", 
            f"--max-count={max_commits}",
            "--pretty=format:%h|%an|%ad|%s",
            "--date=short"
        ], cwd=str(path))
        
        if not cmd_result["success"]:
            result = f"–û–®–ò–ë–ö–ê: {cmd_result['error']}"
            log_tool_result(operation, error=result)
            return result
        
        if not cmd_result["output"]:
            result = "–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤ –ø—É—Å—Ç–∞"
        else:
            lines = cmd_result["output"].split('\n')
            formatted_lines = [f"–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤ –≤ {directory}:\n"]
            
            for line in lines:
                parts = line.split('|')
                if len(parts) == 4:
                    hash_short, author, date, message = parts
                    formatted_lines.append(f"  {hash_short} - {author} ({date}): {message}")
            
            result = "\n".join(formatted_lines)
        
        duration = time.time() - start_time
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_diff(directory: str = ".", filename: str = "") -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–∏—è –≤ —Ñ–∞–π–ª–∞—Ö.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        filename: –ò–º—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        str: –†–∞–∑–ª–∏—á–∏—è –≤ —Ñ–∞–π–ª–∞—Ö
    """
    start_time = time.time()
    args = {"directory": directory, "filename": filename}
    operation = log_tool_start("git_diff", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, error=result)
            return result
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        command = ["git", "diff"]
        if filename:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            if not re.match(r'^[a-zA-Z0-9._/-]+$', filename):
                result = f"–û–®–ò–ë–ö–ê: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {filename}"
                log_tool_result(operation, error=result)
                return result
            command.append(filename)
        
        cmd_result = _run_git_command(command, cwd=str(path))
        
        if not cmd_result["success"]:
            result = f"–û–®–ò–ë–ö–ê: {cmd_result['error']}"
            log_tool_result(operation, error=result)
            return result
        
        if not cmd_result["output"]:
            result = "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥
            result = f"–†–∞–∑–ª–∏—á–∏—è –≤ {directory}" + (f" –¥–ª—è —Ñ–∞–π–ª–∞ {filename}" if filename else "") + ":\n\n" + cmd_result["output"]
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–ª–∏—á–∏–π: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_branch_list(directory: str = ".") -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        
    Returns:
        str: –°–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫
    """
    start_time = time.time()
    args = {"directory": directory}
    operation = log_tool_start("git_branch_list", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, result=result)
            return result
        
        cmd_result = _run_git_command(["git", "branch", "-a"], cwd=str(path))
        
        if not cmd_result["success"]:
            result = f"–û–®–ò–ë–ö–ê: {cmd_result['error']}"
            log_tool_result(operation, result=result)
            return result
        
        if not cmd_result["output"]:
            result = "–ù–µ—Ç –≤–µ—Ç–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        else:
            lines = cmd_result["output"].split('\n')
            formatted_lines = [f"–í–µ—Ç–∫–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {directory}:\n"]
            
            for line in lines:
                line = line.strip()
                if line:
                    if line.startswith('*'):
                        formatted_lines.append(f"  ‚û§ {line[1:].strip()} (—Ç–µ–∫—É—â–∞—è)")
                    else:
                        formatted_lines.append(f"    {line}")
            
            result = "\n".join(formatted_lines)
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–µ—Ç–æ–∫: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_add_file(directory: str, filename: str) -> str:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ –∏–Ω–¥–µ–∫—Å Git.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    start_time = time.time()
    args = {"directory": directory, "filename": filename}
    operation = log_tool_start("git_add_file", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, result=result)
            return result
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if not re.match(r'^[a-zA-Z0-9._/-]+$', filename):
            result = f"–û–®–ò–ë–ö–ê: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {filename}"
            log_tool_result(operation, result=result)
            return result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        file_path = path / filename
        if not file_path.exists():
            result = f"–û–®–ò–ë–ö–ê: –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            log_tool_result(operation, result=result)
            return result
        
        cmd_result = _run_git_command(["git", "add", filename], cwd=str(path))
        
        if cmd_result["success"]:
            result = f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–¥–µ–∫—Å"
        else:
            result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {cmd_result['error']}"
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_commit(directory: str, message: str, author_name: str = "", author_email: str = "") -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–∏—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
        author_name: –ò–º—è –∞–≤—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        author_email: Email –∞–≤—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    start_time = time.time()
    args = {"directory": directory, "message": message, "author_name": author_name, "author_email": author_email}
    operation = log_tool_start("git_commit", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, result=result)
            return result
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞
        if not message or len(message.strip()) < 3:
            result = "–û–®–ò–ë–ö–ê: –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"
            log_tool_result(operation, result=result)
            return result
        
        if len(message) > 500:
            result = "–û–®–ò–ë–ö–ê: –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)"
            log_tool_result(operation, result=result)
            return result
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        command = ["git", "commit", "-m", message.strip()]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if author_name and author_email:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É, –ª–∞—Ç–∏–Ω–∏—Ü—É, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            if not re.match(r'^[\w\s–∞-—è—ë–ê-–Ø–Å\-\.]+$', author_name):
                result = "–û–®–ò–ë–ö–ê: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ —Ç–æ—á–∫–∏)"
                log_tool_result(operation, result=result)
                return result
            
            # –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
            if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+(\.[a-zA-Z]{2,})?$', author_email):
                result = "–û–®–ò–ë–ö–ê: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π email –∞–≤—Ç–æ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç: user@domain.com –∏–ª–∏ user@local)"
                log_tool_result(operation, result=result)
                return result
            
            command.extend(["--author", f"{author_name} <{author_email}>"])
        
        cmd_result = _run_git_command(command, cwd=str(path))
        
        if cmd_result["success"]:
            result = f"‚úÖ –ö–æ–º–º–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {message}"
            if cmd_result["output"]:
                result += f"\n{cmd_result['output']}"
        else:
            result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞: {cmd_result['error']}"
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_checkout_branch(directory: str, branch_name: str, create_new: bool = False) -> str:
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –≤–µ—Ç–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        branch_name: –ò–º—è –≤–µ—Ç–∫–∏
        create_new: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    start_time = time.time()
    args = {"directory": directory, "branch_name": branch_name, "create_new": create_new}
    operation = log_tool_start("git_checkout_branch", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, result=result)
            return result
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –≤–µ—Ç–∫–∏ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if not re.match(r'^[\w–∞-—è—ë–ê-–Ø–Å._/-]+$', branch_name):
            result = f"–û–®–ò–ë–ö–ê: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –≤–µ—Ç–∫–∏: {branch_name} (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏, –¥–µ—Ñ–∏—Å—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ —Å–ª–µ—à–∏)"
            log_tool_result(operation, result=result)
            return result
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        command = ["git", "checkout"]
        if create_new:
            command.append("-b")
        command.append(branch_name)
        
        cmd_result = _run_git_command(command, cwd=str(path))
        
        if cmd_result["success"]:
            action = "—Å–æ–∑–¥–∞–Ω–∞ –∏ –≤—ã–±—Ä–∞–Ω–∞" if create_new else "–≤—ã–±—Ä–∞–Ω–∞"
            result = f"‚úÖ –í–µ—Ç–∫–∞ {branch_name} {action}"
            if cmd_result["output"]:
                result += f"\n{cmd_result['output']}"
        else:
            result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–µ—Ç–∫—É: {cmd_result['error']}"
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_pull(directory: str = ".") -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    start_time = time.time()
    args = {"directory": directory}
    operation = log_tool_start("git_pull", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, result=result)
            return result
        
        cmd_result = _run_git_command(["git", "pull"], cwd=str(path))
        
        if cmd_result["success"]:
            result = "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
            if cmd_result["output"]:
                result += f"\n{cmd_result['output']}"
        else:
            result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {cmd_result['error']}"
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_remote_info(directory: str = ".") -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        
    Returns:
        str: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö
    """
    start_time = time.time()
    args = {"directory": directory}
    operation = log_tool_start("git_remote_info", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, result=result)
            return result
        
        cmd_result = _run_git_command(["git", "remote", "-v"], cwd=str(path))
        
        if not cmd_result["success"]:
            result = f"–û–®–ò–ë–ö–ê: {cmd_result['error']}"
            log_tool_result(operation, result=result)
            return result
        
        if not cmd_result["output"]:
            result = "–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        else:
            result = f"–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è {directory}:\n\n{cmd_result['output']}"
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_init(directory: str = ".", bare: bool = False) -> str:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
    
    Args:
        directory: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        bare: –°–æ–∑–¥–∞—Ç—å bare —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–±–µ–∑ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    """
    start_time = time.time()
    args = {"directory": directory, "bare": bare}
    operation = log_tool_start("git_init", **args)
    
    try:
        path = Path(directory)
        if not path.exists():
            result = f"–û–®–ò–ë–ö–ê: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            log_tool_result(operation, error=result)
            return result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —É–∂–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        if (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, error=result)
            return result
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        command = ["git", "init"]
        if bare:
            command.append("--bare")
        
        cmd_result = _run_git_command(command, cwd=str(path))
        
        if cmd_result["success"]:
            repo_type = "bare" if bare else "–æ–±—ã—á–Ω—ã–π"
            result = f"‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ({repo_type}) —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ {directory}"
            if cmd_result["output"]:
                result += f"\n{cmd_result['output']}"
        else:
            result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {cmd_result['error']}"
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_config(directory: str = ".", name: str = "", email: str = "", global_config: bool = False) -> str:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Git –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ email).
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        global_config: –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ (--global)
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    """
    start_time = time.time()
    args = {"directory": directory, "name": name, "email": email, "global_config": global_config}
    operation = log_tool_start("git_config", **args)
    
    try:
        path = Path(directory)
        if not global_config and (not path.exists() or not (path / ".git").exists()):
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, error=result)
            return result
        
        results = []
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if name:
            command = ["git", "config"]
            if global_config:
                command.append("--global")
            command.extend(["user.name", name])
            
            cmd_result = _run_git_command(command, cwd=str(path) if not global_config else None)
            if cmd_result["success"]:
                results.append(f"‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {name}")
            else:
                results.append(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–µ–Ω–∏: {cmd_result['error']}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º email
        if email:
            command = ["git", "config"]
            if global_config:
                command.append("--global")
            command.extend(["user.email", email])
            
            cmd_result = _run_git_command(command, cwd=str(path) if not global_config else None)
            if cmd_result["success"]:
                results.append(f"‚úÖ Email —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {email}")
            else:
                results.append(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ email: {cmd_result['error']}")
        
        if not name and not email:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            command = ["git", "config"]
            if global_config:
                command.append("--global")
            command.extend(["--list"])
            
            cmd_result = _run_git_command(command, cwd=str(path) if not global_config else None)
            if cmd_result["success"]:
                result = f"–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Git:\n{cmd_result['output']}"
            else:
                result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {cmd_result['error']}"
        else:
            result = "\n".join(results)
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_add_all(directory: str = ".") -> str:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∏–Ω–¥–µ–∫—Å Git.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    start_time = time.time()
    args = {"directory": directory}
    operation = log_tool_start("git_add_all", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, error=result)
            return result
        
        cmd_result = _run_git_command(["git", "add", "."], cwd=str(path))
        
        if cmd_result["success"]:
            result = "‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–Ω–¥–µ–∫—Å"
        else:
            result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {cmd_result['error']}"
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_push(directory: str = ".", remote: str = "origin", branch: str = "") -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        remote: –ò–º—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        branch: –ò–º—è –≤–µ—Ç–∫–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è)
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    start_time = time.time()
    args = {"directory": directory, "remote": remote, "branch": branch}
    operation = log_tool_start("git_push", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, error=result)
            return result
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        command = ["git", "push", remote]
        if branch:
            command.append(branch)
        
        cmd_result = _run_git_command(command, cwd=str(path))
        
        if cmd_result["success"]:
            result = f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ {remote}"
            if cmd_result["output"]:
                result += f"\n{cmd_result['output']}"
        else:
            result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {cmd_result['error']}"
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_remote_add(directory: str, name: str, url: str) -> str:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        name: –ò–º—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        url: URL —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    start_time = time.time()
    args = {"directory": directory, "name": name, "url": url}
    operation = log_tool_start("git_remote_add", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, error=result)
            return result
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
        if not url.startswith(('http://', 'https://', 'git://', 'ssh://', 'git@')):
            result = f"–û–®–ò–ë–ö–ê: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {url}"
            log_tool_result(operation, error=result)
            return result
        
        cmd_result = _run_git_command(["git", "remote", "add", name, url], cwd=str(path))
        
        if cmd_result["success"]:
            result = f"‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '{name}' –¥–æ–±–∞–≤–ª–µ–Ω: {url}"
        else:
            result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {cmd_result['error']}"
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_remote_remove(directory: str, name: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        name: –ò–º—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    start_time = time.time()
    args = {"directory": directory, "name": name}
    operation = log_tool_start("git_remote_remove", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, error=result)
            return result
        
        cmd_result = _run_git_command(["git", "remote", "remove", name], cwd=str(path))
        
        if cmd_result["success"]:
            result = f"‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '{name}' —É–¥–∞–ª–µ–Ω"
        else:
            result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {cmd_result['error']}"
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_merge(directory: str, branch_name: str, message: str = "") -> str:
    """
    –°–ª–∏–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–µ—Ç–∫—É –≤ —Ç–µ–∫—É—â—É—é.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        branch_name: –ò–º—è –≤–µ—Ç–∫–∏ –¥–ª—è —Å–ª–∏—è–Ω–∏—è
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ —Å–ª–∏—è–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    start_time = time.time()
    args = {"directory": directory, "branch_name": branch_name, "message": message}
    operation = log_tool_start("git_merge", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, error=result)
            return result
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        command = ["git", "merge"]
        if message:
            command.extend(["-m", message])
        command.append(branch_name)
        
        cmd_result = _run_git_command(command, cwd=str(path))
        
        if cmd_result["success"]:
            result = f"‚úÖ –í–µ—Ç–∫–∞ '{branch_name}' —É—Å–ø–µ—à–Ω–æ —Å–ª–∏—Ç–∞"
            if cmd_result["output"]:
                result += f"\n{cmd_result['output']}"
        else:
            result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–ª–∏—è–Ω–∏–∏ –≤–µ—Ç–∫–∏: {cmd_result['error']}"
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_reset(directory: str, mode: str = "soft", commit_hash: str = "HEAD~1") -> str:
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–æ–º–º–∏—Ç—É.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        mode: –†–µ–∂–∏–º —Å–±—Ä–æ—Å–∞ (soft, mixed, hard)
        commit_hash: –•–µ—à –∫–æ–º–º–∏—Ç–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é HEAD~1)
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    start_time = time.time()
    args = {"directory": directory, "mode": mode, "commit_hash": commit_hash}
    operation = log_tool_start("git_reset", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, error=result)
            return result
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞
        valid_modes = ["soft", "mixed", "hard"]
        if mode not in valid_modes:
            result = f"–û–®–ò–ë–ö–ê: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–µ–∂–∏–º —Å–±—Ä–æ—Å–∞ '{mode}'. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {', '.join(valid_modes)}"
            log_tool_result(operation, error=result)
            return result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ hard reset (–æ–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
        if mode == "hard":
            result = "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: Hard reset –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö. –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
            log_tool_result(operation, error=result)
            return result
        
        cmd_result = _run_git_command(["git", "reset", f"--{mode}", commit_hash], cwd=str(path))
        
        if cmd_result["success"]:
            result = f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–±—Ä–æ—à–µ–Ω –∫ –∫–æ–º–º–∏—Ç—É {commit_hash} (—Ä–µ–∂–∏–º: {mode})"
            if cmd_result["output"]:
                result += f"\n{cmd_result['output']}"
        else:
            result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: {cmd_result['error']}"
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_stash(directory: str = ".", action: str = "save", message: str = "") -> str:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç stash (–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π).
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        action: –î–µ–π—Å—Ç–≤–∏–µ (save, list, pop, apply, drop)
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è stash (—Ç–æ–ª—å–∫–æ –¥–ª—è save)
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    start_time = time.time()
    args = {"directory": directory, "action": action, "message": message}
    operation = log_tool_start("git_stash", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, error=result)
            return result
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        command = ["git", "stash"]
        
        if action == "save":
            if message:
                command.extend(["save", message])
            else:
                command.append("save")
        elif action == "list":
            command.append("list")
        elif action == "pop":
            command.append("pop")
        elif action == "apply":
            command.append("apply")
        elif action == "drop":
            command.append("drop")
        else:
            result = f"–û–®–ò–ë–ö–ê: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ '{action}'. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: save, list, pop, apply, drop"
            log_tool_result(operation, error=result)
            return result
        
        cmd_result = _run_git_command(command, cwd=str(path))
        
        if cmd_result["success"]:
            if action == "list":
                if cmd_result["output"]:
                    result = f"–°–ø–∏—Å–æ–∫ stash:\n{cmd_result['output']}"
                else:
                    result = "–°–ø–∏—Å–æ–∫ stash –ø—É—Å—Ç"
            else:
                result = f"‚úÖ Stash –æ–ø–µ—Ä–∞—Ü–∏—è '{action}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                if cmd_result["output"]:
                    result += f"\n{cmd_result['output']}"
        else:
            result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ stash: {cmd_result['error']}"
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_tag(directory: str, tag_name: str, message: str = "", commit_hash: str = "HEAD") -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–≥ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        tag_name: –ò–º—è —Ç–µ–≥–∞
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        commit_hash: –•–µ—à –∫–æ–º–º–∏—Ç–∞ –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é HEAD)
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    start_time = time.time()
    args = {"directory": directory, "tag_name": tag_name, "message": message, "commit_hash": commit_hash}
    operation = log_tool_start("git_tag", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, error=result)
            return result
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ç–µ–≥–∞
        if not re.match(r'^[\w–∞-—è—ë–ê-–Ø–Å._/-]+$', tag_name):
            result = f"–û–®–ò–ë–ö–ê: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ç–µ–≥–∞: {tag_name}"
            log_tool_result(operation, error=result)
            return result
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        command = ["git", "tag"]
        if message:
            command.extend(["-a", tag_name, "-m", message, commit_hash])
        else:
            command.extend([tag_name, commit_hash])
        
        cmd_result = _run_git_command(command, cwd=str(path))
        
        if cmd_result["success"]:
            result = f"‚úÖ –¢–µ–≥ '{tag_name}' —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–æ–º–º–∏—Ç–∞ {commit_hash}"
            if message:
                result += f" —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {message}"
        else:
            result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞: {cmd_result['error']}"
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_tag_list(directory: str = ".") -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        
    Returns:
        str: –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
    """
    start_time = time.time()
    args = {"directory": directory}
    operation = log_tool_start("git_tag_list", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, error=result)
            return result
        
        cmd_result = _run_git_command(["git", "tag", "-l"], cwd=str(path))
        
        if not cmd_result["success"]:
            result = f"–û–®–ò–ë–ö–ê: {cmd_result['error']}"
            log_tool_result(operation, error=result)
            return result
        
        if not cmd_result["output"]:
            result = "–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            tags = cmd_result["output"].split('\n')
            formatted_tags = [f"–¢–µ–≥–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {directory}:\n"]
            for tag in tags:
                if tag.strip():
                    formatted_tags.append(f"  üè∑Ô∏è  {tag.strip()}")
            result = "\n".join(formatted_tags)
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_clone(directory: str, repository_url: str, branch: str = "") -> str:
    """
    –ö–ª–æ–Ω–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
    
    Args:
        directory: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        repository_url: URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        branch: –í–µ—Ç–∫–∞ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    start_time = time.time()
    args = {"directory": directory, "repository_url": repository_url, "branch": branch}
    operation = log_tool_start("git_clone", **args)
    
    try:
        path = Path(directory)
        if path.exists():
            result = f"–û–®–ò–ë–ö–ê: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            log_tool_result(operation, error=result)
            return result
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
        if not repository_url.startswith(('http://', 'https://', 'git://', 'ssh://', 'git@')):
            result = f"–û–®–ò–ë–ö–ê: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repository_url}"
            log_tool_result(operation, error=result)
            return result
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        command = ["git", "clone"]
        if branch:
            command.extend(["-b", branch])
        command.extend([repository_url, directory])
        
        cmd_result = _run_git_command(command)
        
        if cmd_result["success"]:
            result = f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤ {directory}"
            if branch:
                result += f" (–≤–µ—Ç–∫–∞: {branch})"
            if cmd_result["output"]:
                result += f"\n{cmd_result['output']}"
        else:
            result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {cmd_result['error']}"
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

@function_tool
def git_fetch(directory: str = ".", remote: str = "origin") -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –±–µ–∑ —Å–ª–∏—è–Ω–∏—è.
    
    Args:
        directory: –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        remote: –ò–º—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    start_time = time.time()
    args = {"directory": directory, "remote": remote}
    operation = log_tool_start("git_fetch", **args)
    
    try:
        path = Path(directory)
        if not path.exists() or not (path / ".git").exists():
            result = f"–û–®–ò–ë–ö–ê: {directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
            log_tool_result(operation, error=result)
            return result
        
        cmd_result = _run_git_command(["git", "fetch", remote], cwd=str(path))
        
        if cmd_result["success"]:
            result = f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ {remote}"
            if cmd_result["output"]:
                result += f"\n{cmd_result['output']}"
        else:
            result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {cmd_result['error']}"
        
        log_tool_result(operation, result=result)
        return result
        
    except Exception as e:
        result = f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        log_tool_result(operation, error=result)
        return result

# ============================================================================
# –°–õ–û–í–ê–†–¨ GIT –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
# ============================================================================

GIT_TOOLS = {
    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    "git_status": git_status,
    "git_log": git_log,
    "git_diff": git_diff,
    "git_branch_list": git_branch_list,
    "git_add_file": git_add_file,
    "git_add_all": git_add_all,
    "git_commit": git_commit,
    "git_checkout_branch": git_checkout_branch,
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    "git_init": git_init,
    "git_config": git_config,
    "git_clone": git_clone,
    
    # –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    "git_remote_info": git_remote_info,
    "git_remote_add": git_remote_add,
    "git_remote_remove": git_remote_remove,
    "git_fetch": git_fetch,
    "git_pull": git_pull,
    "git_push": git_push,
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç–∫–∞–º–∏ –∏ —Å–ª–∏—è–Ω–∏–µ
    "git_merge": git_merge,
    "git_reset": git_reset,
    "git_stash": git_stash,
    
    # –¢–µ–≥–∏
    "git_tag": git_tag,
    "git_tag_list": git_tag_list,
}

def get_git_tools() -> List[Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö Git –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
    return list(GIT_TOOLS.values())

def get_git_tools_by_names(tool_names: List[str]) -> List[Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Git –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∏—Ö –∏–º–µ–Ω–∞–º."""
    tools = []
    for name in tool_names:
        if name in GIT_TOOLS:
            tools.append(GIT_TOOLS[name])
        else:
            print(f"‚ö†Ô∏è  Git –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return tools 