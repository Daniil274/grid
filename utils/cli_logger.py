# Simple CLI logger helper

import sys
import datetime

LOG_LEVELS = {
    'DEBUG': 10,
    'INFO': 20,
    'WARNING': 30,
    'ERROR': 40,
    'CRITICAL': 50,
}

class CLILogger:
    def __init__(self, level: str = 'INFO', stream=None):
        self.level = level.upper()
        self.level_num = LOG_LEVELS.get(self.level, 20)
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º stdout, –Ω–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ stderr
        self.stream = stream if stream is not None else sys.stdout
        self._op_counter = 0

    def log(self, level: str, message: str):
        if LOG_LEVELS.get(level, 0) >= self.level_num:
            ts = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            try:
                self.stream.write(f"{ts} [{level}] {message}\n")
                self.stream.flush()
            except Exception:
                # Swallow stream errors to ensure logging does not break caller flow
                # Optionally, we could attempt to fallback to stderr, but tests only
                # require graceful handling without raising.
                pass

    def mcp_call(self, server: str, method: str, args: dict):
        """–ö—Ä–∞—Å–∏–≤–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –≤—ã–∑–æ–≤–æ–≤."""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤
        server_icons = {
            'filesystem': 'üìÅ',
            'git': 'üîÄ',
            'sequential_thinking': 'üß†',
            'coordinator': 'üéØ'
        }
        
        icon = server_icons.get(server, 'üîß')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args_summary = ""
        if args:
            args_parts = []
            for key, value in args.items():
                if isinstance(value, str) and len(value) > 40:
                    args_parts.append(f"{key}=...({len(value)} chars)")
                else:
                    args_parts.append(f"{key}={value}")
            if args_parts:
                args_summary = f" ({', '.join(args_parts)})"
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞
        self.info(f"‚ó¶ {icon} [{server}] {method}{args_summary}")
        op_id = self._op_counter
        self._op_counter += 1
        return op_id

    def operation_end(self, op_id: int, result: str = None, error: str = None):
        if error:
            self.error(f"‚úñ op#{op_id} {error}")
        else:
            self.info(f"‚úî op#{op_id} {result or 'completed'}")

    def debug(self, message: str):
        self.log('DEBUG', message)

    def info(self, message: str):
        self.log('INFO', message)

    def warning(self, message: str):
        self.log('WARNING', message)

    def error(self, message: str):
        self.log('ERROR', message)

    def critical(self, message: str):
        self.log('CRITICAL', message)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
# –ü–∏—à–µ–º –≤ stderr, —á—Ç–æ–±—ã –æ—Ç–¥–µ–ª–∏—Ç—å –ª–æ–≥–∏ –æ—Ç STDIO –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ MCP
cli_logger = CLILogger(stream=sys.stderr)
